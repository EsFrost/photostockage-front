This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-13T10:13:58.177Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
__tests_/BackToTopButton.test.tsx
__tests_/Comments.test.tsx
__tests_/CookieConsent.test.tsx
__tests_/DownloadButton.test.tsx
__tests_/Footer.test.tsx
__tests_/Hero.test.tsx
__tests_/UserTooltip.test.tsx
about/page.tsx
account/page.tsx
api/upload/route.ts
components/BackToTopButton.tsx
components/Comments.tsx
components/CookieConsent.tsx
components/dashboard/administrator/Categories.tsx
components/dashboard/administrator/Comments.tsx
components/dashboard/administrator/MyAccount.tsx
components/dashboard/administrator/Photos.tsx
components/dashboard/administrator/Users.tsx
components/dashboard/user/AddPhotoForm.tsx
components/dashboard/user/Downloads.tsx
components/dashboard/user/MyAccount.tsx
components/dashboard/user/MyComments.tsx
components/dashboard/user/MyLikes.tsx
components/dashboard/user/MyPhotos.tsx
components/DownloadButton.tsx
components/Footer.tsx
components/Header.tsx
components/Hero.tsx
components/Likes.tsx
components/OfflineFallback.tsx
components/Polaroid.tsx
components/SlateEditor.tsx
components/UserTooltip.tsx
contact/page.tsx
dashboard/page.tsx
globals.css
layout.tsx
login/page.tsx
not-found.tsx
page.tsx
photo/[id]/page.tsx
register/page.tsx
utils/interfaces.tsx

================================================================
Repository Files
================================================================

================
File: __tests_/BackToTopButton.test.tsx
================
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import BackToTopButton from "@/app/components/BackToTopButton";

describe("BackToTopButton Component", () => {
  const mockScrollTo = jest.fn();

  beforeEach(() => {
    // Mock window.scrollTo
    window.scrollTo = mockScrollTo;

    // Reset scroll position
    Object.defineProperty(window, "scrollY", {
      value: 0,
      writable: true,
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("is hidden by default when scroll position is at top", () => {
    render(<BackToTopButton />);
    const button = screen.getByRole("button", { hidden: true });
    expect(button).toHaveClass("opacity-0");
  });

  it("becomes visible when scrolling down past threshold", () => {
    render(<BackToTopButton />);

    // Simulate scrolling down
    Object.defineProperty(window, "scrollY", { value: 400 });
    fireEvent.scroll(window);

    const button = screen.getByRole("button");
    expect(button).toHaveClass("opacity-100");
  });

  it("becomes hidden when scrolling back up", () => {
    render(<BackToTopButton />);

    // Scroll down first
    Object.defineProperty(window, "scrollY", { value: 400 });
    fireEvent.scroll(window);

    // Then scroll back up
    Object.defineProperty(window, "scrollY", { value: 200 });
    fireEvent.scroll(window);

    const button = screen.getByRole("button", { hidden: true });
    expect(button).toHaveClass("opacity-0");
  });

  it("calls window.scrollTo when clicked", () => {
    render(<BackToTopButton />);

    // Make button visible first
    Object.defineProperty(window, "scrollY", { value: 400 });
    fireEvent.scroll(window);

    const button = screen.getByRole("button");
    fireEvent.click(button);

    expect(mockScrollTo).toHaveBeenCalledWith({
      top: 0,
      behavior: "smooth",
    });
  });

  it("has correct accessibility attributes", () => {
    render(<BackToTopButton />);
    const button = screen.getByRole("button", { hidden: true });

    expect(button).toHaveAttribute("aria-label", "Back to top");
  });

  it("removes event listener on unmount", () => {
    const removeEventListenerSpy = jest.spyOn(window, "removeEventListener");
    const { unmount } = render(<BackToTopButton />);

    unmount();

    expect(removeEventListenerSpy).toHaveBeenCalledWith(
      "scroll",
      expect.any(Function)
    );
  });
});

================
File: __tests_/Comments.test.tsx
================
import React from "react";
import {
  render,
  screen,
  fireEvent,
  waitFor,
  act,
} from "@testing-library/react";
import { Comments } from "@/app/components/Comments";

// Mock data
const mockComments = [
  {
    id: "1",
    content: "Test comment 1",
    id_user: "user1",
    username: "User One",
    user_icon: "/path/to/icon1.jpg",
    email: "user1@example.com",
  },
  {
    id: "2",
    content: "Test comment 2",
    id_user: "user2",
    username: "User Two",
    user_icon: null,
    email: "user2@example.com",
  },
];

const mockUsers = [
  {
    id: "user1",
    username: "User One",
    user_icon: "/path/to/icon1.jpg",
    email: "user1@example.com",
  },
  {
    id: "user2",
    username: "User Two",
    user_icon: null,
    email: "user2@example.com",
  },
];

describe("Comments Component", () => {
  const mockPhotoId = "photo123";

  beforeEach(() => {
    jest.useFakeTimers();
    jest.clearAllMocks();
    localStorage.clear();

    // Reset fetch mock
    global.fetch = jest.fn();

    // Mock localStorage
    Storage.prototype.getItem = jest.fn();

    // Spy on console.error and prevent it from actually logging
    jest.spyOn(console, "error").mockImplementation(() => {});
  });

  afterEach(() => {
    jest.useRealTimers();
    jest.restoreAllMocks();
  });

  it("renders loading state initially", async () => {
    global.fetch = jest.fn(
      () => new Promise((resolve) => setTimeout(resolve, 1000))
    ) as jest.Mock;

    render(<Comments photo_id={mockPhotoId} />);
    expect(screen.getByText(/Loading.../i)).toBeInTheDocument();
  });

  it("renders comments when data is loaded", async () => {
    // Mock both API calls
    global.fetch = jest
      .fn()
      .mockImplementationOnce(() =>
        Promise.resolve({
          ok: true,
          json: () => Promise.resolve(mockComments),
        })
      )
      .mockImplementationOnce(() =>
        Promise.resolve({
          ok: true,
          json: () => Promise.resolve(mockUsers),
        })
      ) as jest.Mock;

    await act(async () => {
      render(<Comments photo_id={mockPhotoId} />);
    });

    await waitFor(() => {
      expect(screen.getByText("Test comment 1")).toBeInTheDocument();
      expect(screen.getByText("Test comment 2")).toBeInTheDocument();
    });
  });

  it("shows error message when fetch fails", async () => {
    global.fetch = jest
      .fn()
      .mockRejectedValue(new Error("Failed to fetch data")) as jest.Mock;

    await act(async () => {
      render(<Comments photo_id={mockPhotoId} />);
    });

    await waitFor(() => {
      expect(screen.getByText("Failed to fetch data")).toBeInTheDocument();
    });
  });

  it("shows login message for unauthenticated users", async () => {
    global.fetch = jest.fn(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve(mockComments),
      })
    ) as jest.Mock;

    (localStorage.getItem as jest.Mock).mockReturnValue(null);

    await act(async () => {
      render(<Comments photo_id={mockPhotoId} />);
    });

    await waitFor(() => {
      expect(
        screen.getByText(/Please log in to leave a comment/i)
      ).toBeInTheDocument();
    });
  });

  it("shows comment form for authenticated users", async () => {
    global.fetch = jest.fn(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve(mockComments),
      })
    ) as jest.Mock;

    (localStorage.getItem as jest.Mock).mockImplementation((key) => {
      if (key === "isLoggedIn") return "true";
      if (key === "tokenExpires") return String(Date.now() + 3600000);
      return null;
    });

    await act(async () => {
      render(<Comments photo_id={mockPhotoId} />);
    });

    await waitFor(() => {
      const submitButton = screen.getByText(/Submit Comment/i);
      expect(submitButton).toBeInTheDocument();
    });
  });

  it("renders alternating comment styles", async () => {
    global.fetch = jest.fn(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve(mockComments),
      })
    ) as jest.Mock;

    await act(async () => {
      render(<Comments photo_id={mockPhotoId} />);
    });

    await waitFor(() => {
      const commentDivs = document.querySelectorAll(
        'div[class*="bg-[#6366F1]"]'
      );
      expect(commentDivs.length).toBe(1);
    });
  });

  it("handles periodic refresh", async () => {
    const fetchMock = jest.fn().mockImplementation(() =>
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve(mockComments),
      })
    ) as jest.Mock;

    global.fetch = fetchMock;

    // Set interval spy
    const setIntervalSpy = jest.spyOn(window, "setInterval");

    render(<Comments photo_id={mockPhotoId} />);

    await act(async () => {
      await Promise.resolve();
    });

    // Verify setInterval was called with correct interval
    expect(setIntervalSpy).toHaveBeenCalledWith(expect.any(Function), 5000);
    expect(setIntervalSpy).toHaveBeenCalledTimes(1);

    setIntervalSpy.mockRestore();
  });
});

================
File: __tests_/CookieConsent.test.tsx
================
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import CookieConsent from "@/app/components/CookieConsent";

describe("CookieConsent Component", () => {
  beforeEach(() => {
    // Clear localStorage before each test
    window.localStorage.clear();
    // Reset all mocks
    jest.clearAllMocks();
  });

  it("shows consent banner when no cookie consent is stored", () => {
    render(<CookieConsent />);

    expect(
      screen.getByText(/We use cookies solely to enhance/i)
    ).toBeInTheDocument();
    expect(screen.getByText(/I Understand/i)).toBeInTheDocument();
  });

  it("hides consent banner when cookie consent is already stored", () => {
    localStorage.setItem("cookieConsent", "accepted");
    render(<CookieConsent />);

    expect(
      screen.queryByText(/We use cookies solely to enhance/i)
    ).not.toBeInTheDocument();
    expect(screen.queryByText(/I Understand/i)).not.toBeInTheDocument();
  });

  it("stores consent and hides banner when 'I Understand' is clicked", () => {
    render(<CookieConsent />);

    const acceptButton = screen.getByText(/I Understand/i);
    fireEvent.click(acceptButton);

    // Check if consent was stored
    expect(localStorage.getItem("cookieConsent")).toBe("accepted");

    // Check if banner is hidden
    expect(
      screen.queryByText(/We use cookies solely to enhance/i)
    ).not.toBeInTheDocument();
  });

  it("renders with correct styling classes", () => {
    render(<CookieConsent />);

    const banner = screen.getByRole("complementary");
    expect(banner).toHaveClass(
      "fixed",
      "bottom-0",
      "left-0",
      "right-0",
      "bg-white"
    );
  });

  it("displays correct cookie usage information", () => {
    render(<CookieConsent />);

    expect(screen.getByText(/never used for marketing/i)).toBeInTheDocument();
    expect(
      screen.getByText(/maintain your login session/i)
    ).toBeInTheDocument();
  });

  it("has accessible button with clear call to action", () => {
    render(<CookieConsent />);

    const button = screen.getByRole("button", { name: /I Understand/i });
    expect(button).toHaveClass("bg-indigo-500", "text-white");
  });

  it("uses localStorage correctly", () => {
    const setItemSpy = jest.spyOn(Storage.prototype, "setItem");
    const getItemSpy = jest.spyOn(Storage.prototype, "getItem");

    render(<CookieConsent />);

    // Check if localStorage was checked during initial render
    expect(getItemSpy).toHaveBeenCalledWith("cookieConsent");

    // Click accept button
    fireEvent.click(screen.getByText(/I Understand/i));

    // Verify localStorage was updated
    expect(setItemSpy).toHaveBeenCalledWith("cookieConsent", "accepted");
  });
});

================
File: __tests_/DownloadButton.test.tsx
================
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import DownloadButton from "@/app/components/DownloadButton";

describe("DownloadButton Component", () => {
  const mockOnClick = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("renders with default state", () => {
    render(<DownloadButton onClick={mockOnClick} />);
    const button = screen.getByRole("button");

    expect(button).toBeInTheDocument();
    expect(button).toHaveTextContent("Download");
    expect(button).not.toBeDisabled();
  });

  it("shows loading state when isLoading is true", () => {
    render(<DownloadButton onClick={mockOnClick} isLoading={true} />);
    const button = screen.getByRole("button");

    expect(button).toHaveTextContent("Downloading...");
    expect(button).toBeDisabled();
  });

  it("calls onClick handler when clicked", () => {
    render(<DownloadButton onClick={mockOnClick} />);
    const button = screen.getByRole("button");

    fireEvent.click(button);
    expect(mockOnClick).toHaveBeenCalledTimes(1);
  });

  it("doesn't call onClick handler when disabled", () => {
    render(<DownloadButton onClick={mockOnClick} isLoading={true} />);
    const button = screen.getByRole("button");

    fireEvent.click(button);
    expect(mockOnClick).not.toHaveBeenCalled();
  });

  it("has correct styling classes", () => {
    render(<DownloadButton onClick={mockOnClick} />);
    const button = screen.getByRole("button");

    expect(button).toHaveClass("bg-indigo-500");
    expect(button).toHaveClass("text-white");
  });

  it("contains download icon", () => {
    render(<DownloadButton onClick={mockOnClick} />);
    const icon = document.querySelector(".lucide-download");
    expect(icon).toBeInTheDocument();
  });

  it("applies disabled styling when loading", () => {
    render(<DownloadButton onClick={mockOnClick} isLoading={true} />);
    const button = screen.getByRole("button");

    expect(button).toHaveClass("disabled:opacity-50");
    expect(button).toHaveClass("disabled:cursor-not-allowed");
  });
});

================
File: __tests_/Footer.test.tsx
================
import React from "react";
import { render, screen } from "@testing-library/react";
import { Footer } from "@/app/components/Footer";

describe("Footer Component", () => {
  it("renders the logo and brand name", () => {
    render(<Footer />);

    expect(screen.getByText("photoStockage")).toBeInTheDocument();
    expect(screen.getByAltText("Site logo")).toBeInTheDocument();
  });

  it("displays the tagline", () => {
    render(<Footer />);

    expect(
      screen.getByText("Share your photos, share your experience")
    ).toBeInTheDocument();
  });

  it("renders all navigation links", () => {
    render(<Footer />);

    // Account section links
    expect(screen.getByRole("link", { name: /login/i })).toBeInTheDocument();
    expect(screen.getByRole("link", { name: /sign up/i })).toBeInTheDocument();

    // Contact section links
    expect(
      screen.getByRole("link", { name: /for suggestions/i })
    ).toBeInTheDocument();
    expect(
      screen.getByRole("link", { name: /for questions/i })
    ).toBeInTheDocument();
    expect(
      screen.getByRole("link", { name: /contact us here/i })
    ).toBeInTheDocument();
  });

  it("renders social media icons with links", () => {
    render(<Footer />);

    // Get all SVG elements (social media icons)
    const socialIcons = document.querySelectorAll("svg");
    expect(socialIcons.length).toBe(4); // Facebook, Twitter, Instagram, LinkedIn
  });

  it("includes copyright information", () => {
    render(<Footer />);

    expect(screen.getByText(/© 2024 SigmundFrost/i)).toBeInTheDocument();
  });

  it("has correct section headings", () => {
    render(<Footer />);

    expect(screen.getByText("Account")).toBeInTheDocument();
    expect(screen.getByText("Contact us")).toBeInTheDocument();
  });
});

================
File: __tests_/Hero.test.tsx
================
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { Hero } from "@/app/components/Hero";

// Mock useRouter
jest.mock("next/navigation", () => ({
  useRouter() {
    return {
      push: jest.fn(),
    };
  },
}));

describe("Hero Component", () => {
  beforeEach(() => {
    // Clear localStorage
    window.localStorage.clear();
    // Clear mocks
    jest.clearAllMocks();
  });

  it("renders main heading and description", () => {
    render(<Hero />);

    expect(screen.getByText(/Share your photos/i)).toBeInTheDocument();
    expect(
      screen.getByText(/Do you have photos you want to share with others/i)
    ).toBeInTheDocument();
  });

  it("shows login and signup buttons when user is not authenticated", () => {
    localStorage.setItem("isLoggedIn", "false");
    render(<Hero />);

    expect(screen.getByText(/Sign Up/i)).toBeInTheDocument();
    expect(screen.getByText(/Login/i)).toBeInTheDocument();
  });

  it("shows logout button when user is authenticated", () => {
    localStorage.setItem("isLoggedIn", "true");
    localStorage.setItem("tokenExpires", String(Date.now() + 3600000));

    render(<Hero />);

    expect(screen.getByText(/Logout/i)).toBeInTheDocument();
    expect(screen.queryByText(/Sign Up/i)).not.toBeInTheDocument();
    expect(screen.queryByText(/Login/i)).not.toBeInTheDocument();
  });

  it("handles logout correctly", async () => {
    global.fetch = jest.fn().mockImplementationOnce(() =>
      Promise.resolve({
        ok: true,
      })
    ) as jest.Mock;

    localStorage.setItem("isLoggedIn", "true");
    localStorage.setItem("tokenExpires", String(Date.now() + 3600000));

    render(<Hero />);

    const logoutButton = screen.getByText(/Logout/i);
    await fireEvent.click(logoutButton);

    expect(localStorage.getItem("isLoggedIn")).toBeNull();
    expect(localStorage.getItem("tokenExpires")).toBeNull();
    expect(localStorage.getItem("user_icon")).toBeNull();
  });

  it("does not show authentication buttons when token is expired", () => {
    localStorage.setItem("isLoggedIn", "true");
    localStorage.setItem("tokenExpires", String(Date.now() - 1000)); // Expired token

    render(<Hero />);

    expect(screen.getByText(/Sign Up/i)).toBeInTheDocument();
    expect(screen.getByText(/Login/i)).toBeInTheDocument();
    expect(screen.queryByText(/Logout/i)).not.toBeInTheDocument();
  });

  it("displays the hero image on non-mobile screens", () => {
    render(<Hero />);

    const image = screen.getByAltText("Picture");
    expect(image).toBeInTheDocument();
    expect(image).toHaveClass("hidden", "md:block");
  });
});

================
File: __tests_/UserTooltip.test.tsx
================
import React, { FC } from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import UserTooltip from "@/app/components/UserTooltip";

// Define props type to match the component's props
interface UserTooltipProps {
  username: string;
  email: string;
  className?: string;
}

describe("UserTooltip Component", () => {
  const defaultProps: UserTooltipProps = {
    username: "testuser",
    email: "test@example.com",
  };

  it("renders username correctly", () => {
    render(<UserTooltip {...defaultProps} />);
    expect(screen.getByText("testuser")).toBeInTheDocument();
  });

  it("does not show tooltip by default", () => {
    render(<UserTooltip {...defaultProps} />);
    expect(screen.queryByText("test@example.com")).not.toBeInTheDocument();
  });

  it("shows tooltip on mouse enter", () => {
    render(<UserTooltip {...defaultProps} />);

    const usernameElement = screen.getByText("testuser");
    fireEvent.mouseEnter(usernameElement);

    expect(screen.getByText("test@example.com")).toBeInTheDocument();
  });

  it("hides tooltip on mouse leave", () => {
    render(<UserTooltip {...defaultProps} />);

    const usernameElement = screen.getByText("testuser");

    // Show tooltip
    fireEvent.mouseEnter(usernameElement);
    expect(screen.getByText("test@example.com")).toBeInTheDocument();

    // Hide tooltip
    fireEvent.mouseLeave(usernameElement);
    expect(screen.queryByText("test@example.com")).not.toBeInTheDocument();
  });

  it("applies custom className when provided", () => {
    const customClass = "custom-class";
    render(<UserTooltip {...defaultProps} className={customClass} />);

    const usernameElement = screen.getByText("testuser");
    expect(usernameElement).toHaveClass(customClass);
  });

  it("maintains hover state correctly", () => {
    render(<UserTooltip {...defaultProps} />);
    const usernameElement = screen.getByText("testuser");

    // Initial state
    expect(screen.queryByText("test@example.com")).not.toBeInTheDocument();

    // Mouse enter
    fireEvent.mouseEnter(usernameElement);
    expect(screen.getByText("test@example.com")).toBeInTheDocument();

    // Mouse leave
    fireEvent.mouseLeave(usernameElement);
    expect(screen.queryByText("test@example.com")).not.toBeInTheDocument();

    // Mouse enter again
    fireEvent.mouseEnter(usernameElement);
    expect(screen.getByText("test@example.com")).toBeInTheDocument();
  });
});

================
File: about/page.tsx
================
import React from "react";
import {
  FaCloudUploadAlt,
  FaDownload,
  FaHeart,
  FaComments,
} from "react-icons/fa";
import { IoShareSocialSharp } from "react-icons/io5";
import { FaUserGroup } from "react-icons/fa6";
import Link from "next/link";

export default function About() {
  return (
    <div className="min-h-[100vh] mx-auto px-4 md:px-8 max-w-4xl py-24">
      <h1 className="text-3xl font-medium text-gray-900 mb-8 text-center">
        About photoStockage
      </h1>

      <div className="mb-16 text-gray-600 text-lg text-center max-w-2xl mx-auto">
        <p>
          Hey there! Welcome to photoStockage, where sharing photos is as easy
          as it gets. We&apos;re all about creating a space where photographers
          and creative folks can come together to share their work, find
          inspiration, and grab amazing photos for their projects - all
          completely free.
        </p>
      </div>

      <div className="grid md:grid-cols-2 gap-8 mb-16">
        {/* Upload Feature */}
        <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow">
          <div className="flex items-center mb-4">
            <FaCloudUploadAlt className="text-indigo-500 text-4xl mr-4" />
            <h2 className="text-xl font-semibold text-gray-800">Easy Upload</h2>
          </div>
          <p className="text-gray-600">
            Just drag, drop, and you&apos;re done! Share your photos with our
            community in seconds.
          </p>
        </div>

        {/* Download Feature */}
        <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow">
          <div className="flex items-center mb-4">
            <FaDownload className="text-indigo-500 text-4xl mr-4" />
            <h2 className="text-xl font-semibold text-gray-800">
              Free Downloads
            </h2>
          </div>
          <p className="text-gray-600">
            No subscription needed, no credit card required. All photos are free
            to download and use.
          </p>
        </div>

        {/* Community Feature */}
        <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow">
          <div className="flex items-center mb-4">
            <FaUserGroup className="text-indigo-500 text-4xl mr-4" />
            <h2 className="text-xl font-semibold text-gray-800">
              Active Community
            </h2>
          </div>
          <p className="text-gray-600">
            Connect with fellow photographers and creators who share your
            passion for great images.
          </p>
        </div>

        {/* Interaction Feature */}
        <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow">
          <div className="flex items-center mb-4">
            <div className="flex space-x-1 text-indigo-500 text-4xl mr-4">
              <FaHeart />
              <FaComments />
            </div>
            <h2 className="text-xl font-semibold text-gray-800">
              Show Some Love
            </h2>
          </div>
          <p className="text-gray-600">
            Like your favorite shots and leave comments to connect with
            photographers.
          </p>
        </div>
      </div>

      <div className="bg-indigo-50 p-8 rounded-lg text-center">
        <IoShareSocialSharp className="text-indigo-500 text-4xl mx-auto mb-4" />
        <h2 className="text-2xl font-semibold text-gray-800 mb-4">
          Ready to dive in?
        </h2>
        <p className="text-gray-600 mb-6">
          Join our growing community of creative minds and start sharing your
          perspective with the world.
        </p>
        <Link href="/register">
          <button className="bg-indigo-500 text-white px-8 py-3 rounded-md hover:bg-indigo-600 transition-colors">
            Get Started
          </button>
        </Link>
      </div>

      <div className="mt-16 space-y-8">
        {/* Cookie Information */}
        <div className="bg-white p-8 rounded-lg shadow-md">
          <h2 className="text-2xl font-semibold text-gray-800 mb-6">
            Cookie Usage
          </h2>
          <div className="space-y-4 text-gray-600">
            <p className="font-semibold">Our Limited Cookie Usage:</p>
            <ul className="list-disc pl-5 space-y-2">
              <li>
                <span className="font-semibold">Session Cookies:</span> These
                temporary cookies are essential for keeping you logged in during
                your visit and expire when you close your browser.
              </li>
              <li>
                <span className="font-semibold">Authentication Cookies:</span>{" "}
                These cookies remember your login status so you don&apos;t have
                to log in every time you visit our site.
              </li>
            </ul>
            <div className="mt-6 p-4 bg-blue-50 rounded-lg">
              <p className="font-semibold text-blue-900">Important Notice:</p>
              <p className="text-blue-900 mt-2">
                These cookies are used ONLY to enhance your experience on our
                site and will NEVER be used for marketing or any other purpose.
              </p>
            </div>
          </div>
        </div>

        {/* Legal Notice */}
        <div className="bg-gray-50 p-8 rounded-lg border border-gray-200">
          <h2 className="text-2xl font-semibold text-gray-800 mb-6">
            Legal Notice
          </h2>
          <div className="space-y-4 text-gray-600">
            <p>
              photoStockage is a platform that enables photo sharing between
              users. We do not claim ownership of any content uploaded by users.
            </p>
            <p className="font-semibold mt-4">Legal Disclaimer:</p>
            <ul className="list-disc pl-5 space-y-2">
              <li>
                photoStockage does not take any responsibility regarding the
                content of the photos uploaded to our platform.
              </li>
              <li>
                Users are solely responsible for the content they upload and
                share.
              </li>
              <li>
                photoStockage is not liable for any damages or consequences
                arising from the use or misuse of photos downloaded from our
                platform.
              </li>
              <li>
                By using this platform, users acknowledge that they have the
                necessary rights and permissions to upload and share their
                content.
              </li>
              <li>
                Users downloading content are responsible for ensuring their use
                complies with applicable laws and regulations.
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: account/page.tsx
================
import React from "react";
import Image from "next/image";
import logoFull from "../../../public/logo_full.png";
import Link from "next/link";

export default async function Account() {
  return (
    <div className="min-h-[100vh] flex flex-col px-0 sm:px-5 md:px-[5rem] mx-auto">
      <div
        className="flex flex-col items-center mt-[5rem] p-0 sm:p-10 md:flex-row md:items-stretch 
                        md:border-2 md:border-solid md:border-blue-900 md:outline md:outline-2 
                        md:outline-offset-[15px] md:outline-blue-900 relative"
      >
        <div className="w-full text-center px-4 md:w-1/3 md:pr-4">
          <Image
            src={logoFull}
            width={0}
            height={0}
            sizes="100vw"
            alt="Site logo"
            className="w-[5rem] h-auto pt-24 mb-4 mx-auto"
          />
          <p className="text-gray-600 leading-relaxed text-base">
            You can also contact us through email.
          </p>
          <p className="text-gray-600 leading-relaxed text-base">
            Email: photostockage@photostockage.com
          </p>
          <p className="text-gray-600 leading-relaxed text-base">
            Or through our social media links that can be found{" "}
            <Link href="/">here</Link>
          </p>
        </div>

        {/* Vertical Divider */}
        <div className="hidden md:block absolute top-4 bottom-4 left-1/3 w-px bg-blue-900"></div>

        <div className="w-full md:w-2/3 md:pl-4">
          <section className="text-gray-600 body-font relative">
            <div className="container py-24 mx-auto">
              <div className="flex flex-col text-center w-full mb-12">
                <h1 className="text-3xl font-medium title-font mb-4 text-gray-900">
                  Contact Us
                </h1>
                <p className="mx-auto leading-relaxed text-base w-full sm:w-2/3">
                  For any questions you might have. For any suggestions. Or just
                  to chat with us.
                </p>
              </div>
              <div className="w-full px-4 sm:w-1/2 sm:mx-auto">
                <div className="flex flex-wrap -m-2">
                  <div className="p-2 w-full sm:w-1/2">
                    <div className="relative">
                      <label
                        htmlFor="name"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Name
                      </label>
                      <input
                        type="text"
                        id="name"
                        name="name"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                      />
                    </div>
                  </div>
                  <div className="p-2 w-full sm:w-1/2">
                    <div className="relative">
                      <label
                        htmlFor="email"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Email
                      </label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                      />
                    </div>
                  </div>
                  <div className="p-2 w-full">
                    <div className="relative">
                      <label
                        htmlFor="message"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Message
                      </label>
                      <textarea
                        id="message"
                        name="message"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out"
                      ></textarea>
                    </div>
                  </div>
                  <div className="p-2 w-full">
                    <button className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg">
                      Send message
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
      </div>
    </div>
  );
}

================
File: api/upload/route.ts
================
import { NextResponse } from "next/server";
import { writeFile } from "fs/promises";
import { join } from "path";

export async function POST(req: Request) {
  try {
    const data = await req.formData();
    const file: File | null = data.get("file") as unknown as File;
    const fileIdentifier = data.get("identifier") as string;

    if (!file) {
      return NextResponse.json(
        { success: false, error: "No file uploaded" },
        { status: 400 }
      );
    }

    if (!fileIdentifier) {
      return NextResponse.json(
        { success: false, error: "No file identifier provided" },
        { status: 400 }
      );
    }

    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    const fileName = `${fileIdentifier}${file.name.substring(
      file.name.lastIndexOf(".")
    )}`;
    const uploadDir = join(process.cwd(), "public/images/users");
    const path = join(uploadDir, fileName);

    await writeFile(path, buffer);

    return NextResponse.json({
      success: true,
      fileUrl: `/images/users/${fileName}`,
    });
  } catch (error) {
    console.error("Error uploading file:", error);
    return NextResponse.json(
      { success: false, error: "Failed to upload file" },
      { status: 500 }
    );
  }
}

================
File: components/BackToTopButton.tsx
================
"use client";
import { useState, useEffect } from "react";
import { ChevronUp } from "lucide-react";

const BackToTopButton = () => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const toggleVisibility = () => {
      if (window.scrollY > 300) {
        setIsVisible(true);
      } else {
        setIsVisible(false);
      }
    };

    window.addEventListener("scroll", toggleVisibility);

    return () => {
      window.removeEventListener("scroll", toggleVisibility);
    };
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  return (
    <button
      onClick={scrollToTop}
      className={`fixed right-8 bottom-8 p-3 bg-white text-indigo-500 rounded-full shadow-lg
                 border border-indigo-100 hover:bg-indigo-50 transition-all duration-300 
                 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2
                 ${
                   isVisible
                     ? "opacity-100 translate-y-0"
                     : "opacity-0 translate-y-12 pointer-events-none"
                 }
                 z-50`}
      aria-label="Back to top"
    >
      <ChevronUp className="w-6 h-6" />
    </button>
  );
};

export default BackToTopButton;

================
File: components/Comments.tsx
================
"use client";
import React, { useState, useEffect, useCallback } from "react";
import { Comment, User } from "../utils/interfaces";
import SlateEditor from "./SlateEditor";
import { FaRegCircleUser } from "react-icons/fa6";
import Image from "next/image";
import UserTooltip from "./UserTooltip";

interface CommentWithUser extends Comment {
  username?: string;
  user_icon?: string;
  email?: string;
}

export const Comments = ({ photo_id }: { photo_id: string }) => {
  const [comments, setComments] = useState<CommentWithUser[]>([]);
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(true);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);

  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = localStorage.getItem("tokenExpires");
      const isAuthenticated =
        isLoggedIn && tokenExpires && Number(tokenExpires) > Date.now();

      setIsAuthenticated(Boolean(isAuthenticated));
    };

    checkAuth();
    window.addEventListener("storage", checkAuth);
    window.addEventListener("logoutEvent", checkAuth);

    return () => {
      window.removeEventListener("storage", checkAuth);
      window.removeEventListener("logoutEvent", checkAuth);
    };
  }, []);

  const fetchData = useCallback(async () => {
    if (!photo_id) return;

    try {
      const [commentsResponse, usersResponse] = await Promise.all([
        fetch(`http://localhost:3000/comments/photo/${photo_id}`, {
          headers: { Accept: "application/json" },
        }),
        fetch(`http://localhost:3000/user/users`, {
          headers: { Accept: "application/json" },
        }),
      ]);

      if (!commentsResponse.ok || !usersResponse.ok) {
        throw new Error(`HTTP error! status: ${commentsResponse.status}`);
      }

      const commentsData = await commentsResponse.json();
      const usersData: User[] = await usersResponse.json();

      const userMap = new Map(
        usersData.flatMap((user) => [
          [
            user.id,
            {
              username: user.username,
              user_icon: user.user_icon,
              email: user.email,
            },
          ],
        ])
      );

      const commentsWithUsernames = commentsData.map((comment: Comment) => {
        const userData = userMap.get(comment.id_user) || {
          username: "Unknown User",
          user_icon: "",
          email: "",
        };
        return {
          ...comment,
          username: userData.username,
          user_icon: userData.user_icon,
          email: userData.email,
        };
      });

      setComments(commentsWithUsernames);
    } catch (error) {
      console.error("Error fetching data:", error);
      setError(error instanceof Error ? error.message : "Failed to fetch data");
    } finally {
      setLoading(false);
    }
  }, [photo_id]); // Dependency array ensures fetchData is recreated only when photo_id changes.

  useEffect(() => {
    fetchData();
    const interval = setInterval(fetchData, 5000);
    return () => clearInterval(interval);
  }, [fetchData]);

  const handleCommentSubmit = async (content: string) => {
    try {
      const response = await fetch(
        `http://localhost:3000/comments/add/${photo_id}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          credentials: "include",
          body: JSON.stringify({ content }),
        }
      );

      if (!response.ok) {
        throw new Error("Failed to post comment");
      }

      // Refresh comments after successful submission
      await fetchData();
    } catch (error) {
      console.error("Error posting comment:", error);
      setError(
        error instanceof Error ? error.message : "Failed to post comment"
      );
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>{error}</div>;
  }

  return (
    <div className="">
      <div className="mx-auto max-w-xl mb-8">Comments</div>
      {comments.map((comment, index) => (
        <div
          key={`${comment.id}-${index}`}
          className={`${
            index % 2 === 0 ? "bg-[#6366F1] bg-opacity-10" : ""
          } max-w-xl mx-auto border border-1 border-gray-200 rounded-md p-4 flex flex-col mt-4`}
        >
          <div className={`${index % 2 === 0 ? "text-left" : "text-right"}`}>
            {comment.content}
          </div>
          <div
            className={`${
              index % 2 === 0 ? "text-right" : "text-left"
            } flex items-center gap-2 ${
              index % 2 === 0 ? "justify-end" : "justify-start"
            }`}
          >
            {comment.user_icon ? (
              <Image
                src={comment.user_icon}
                alt="User avatar"
                width={24}
                height={24}
                className="rounded-full object-cover w-6 h-6"
              />
            ) : (
              <FaRegCircleUser className="w-6 h-6 text-gray-600" />
            )}
            <UserTooltip
              username={comment.username || "Unknown User"}
              email={comment.email || "No email available"}
            />
          </div>
        </div>
      ))}
      {isAuthenticated ? (
        <div className="mt-8 max-w-xl mx-auto">
          <SlateEditor onSubmit={handleCommentSubmit} />
        </div>
      ) : (
        <div className="mt-8 max-w-xl mx-auto text-center text-gray-500">
          Please log in to leave a comment.
        </div>
      )}
    </div>
  );
};

================
File: components/CookieConsent.tsx
================
"use client";
import React, { useEffect, useState } from "react";

const CookieConsent = () => {
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    const consent = localStorage.getItem("cookieConsent");
    if (!consent) {
      setShowModal(true);
    }
  }, []);

  const acceptCookies = () => {
    localStorage.setItem("cookieConsent", "accepted");
    setShowModal(false);
  };

  if (!showModal) return null;

  return (
    <div
      className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg z-50"
      role="complementary"
    >
      <div className="max-w-7xl mx-auto p-6">
        <div className="flex flex-col md:flex-row items-center justify-between">
          <div className="mb-4 md:mb-0 md:mr-4">
            <p className="text-gray-600">
              We use cookies solely to enhance your browsing experience and
              maintain your login session. These cookies are essential for the
              website to function properly and are never used for marketing,
              tracking, or any other purpose.
            </p>
          </div>
          <div className="flex-shrink-0">
            <button
              onClick={acceptCookies}
              className="bg-indigo-500 text-white px-6 py-2 rounded-md hover:bg-indigo-600 transition-colors whitespace-nowrap"
            >
              I Understand
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CookieConsent;

================
File: components/dashboard/administrator/Categories.tsx
================
"use client";
import React, { useState, useEffect } from "react";
import { Plus, Pencil, Trash2, Save, X } from "lucide-react";

interface Category {
  id: string;
  name: string;
  description: string;
}

const Categories = () => {
  const [categories, setCategories] = useState<Category[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");
  const [editingCategory, setEditingCategory] = useState<Category | null>(null);
  const [isAdding, setIsAdding] = useState(false);

  const [formData, setFormData] = useState({
    name: "",
    description: "",
  });

  const fetchCategories = async () => {
    try {
      const response = await fetch("http://localhost:3000/categories", {
        credentials: "include",
        headers: { Accept: "application/json" },
      });

      if (!response.ok) throw new Error("Failed to fetch categories");
      const data = await response.json();
      setCategories(data);
    } catch (error) {
      setError(
        error instanceof Error ? error.message : "Failed to fetch categories"
      );
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.name.trim() || !formData.description.trim()) {
      setError("Name and description are required");
      return;
    }

    try {
      if (editingCategory) {
        const response = await fetch(
          `http://localhost:3000/categories/edit/${editingCategory.id}`,
          {
            method: "PUT",
            credentials: "include",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              name: formData.name,
              description: formData.description,
            }),
          }
        );

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to update category");
        }
      } else {
        // Adding new category
        const response = await fetch("http://localhost:3000/categories", {
          method: "POST",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to add category");
        }
      }

      await fetchCategories();
      setFormData({ name: "", description: "" });
      setEditingCategory(null);
      setIsAdding(false);
      setError("");
    } catch (error) {
      console.error("Error saving category:", error);
      setError(
        error instanceof Error ? error.message : "Failed to save category"
      );
    }
  };

  const handleEdit = (category: Category) => {
    setEditingCategory(category);
    setFormData({
      name: category.name,
      description: category.description,
    });
    setIsAdding(false);
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm("Are you sure you want to delete this category?"))
      return;

    try {
      const response = await fetch(
        `http://localhost:3000/categories/delete/${id}`,
        {
          method: "DELETE",
          credentials: "include",
        }
      );

      if (!response.ok) throw new Error("Failed to delete category");

      await fetchCategories();
    } catch (error) {
      setError(
        error instanceof Error ? error.message : "Failed to delete category"
      );
    }
  };

  const handleCancel = () => {
    setEditingCategory(null);
    setIsAdding(false);
    setFormData({ name: "", description: "" });
    setError("");
  };

  if (isLoading) return <div>Loading...</div>;

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-8">
      {/* Header and Add Button */}
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-semibold text-gray-800">Categories</h2>
        {!isAdding && !editingCategory && (
          <button
            onClick={() => setIsAdding(true)}
            className="flex items-center gap-2 bg-indigo-500 text-white px-4 py-2 rounded-md hover:bg-indigo-600"
          >
            <Plus className="w-4 h-4" />
            Add Category
          </button>
        )}
      </div>

      {/* Form for Adding/Editing */}
      {(isAdding || editingCategory) && (
        <form
          onSubmit={handleSubmit}
          className="bg-white p-6 rounded-lg shadow space-y-4"
        >
          <h3 className="text-lg font-medium text-gray-900">
            {editingCategory ? "Edit Category" : "Add New Category"}
          </h3>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Name
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, name: e.target.value }))
              }
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Description
            </label>
            <textarea
              value={formData.description}
              onChange={(e) =>
                setFormData((prev) => ({
                  ...prev,
                  description: e.target.value,
                }))
              }
              rows={3}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            />
          </div>

          {error && <p className="text-red-500 text-sm">{error}</p>}

          <div className="flex justify-end gap-3">
            <button
              type="button"
              onClick={handleCancel}
              className="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
            >
              <X className="w-4 h-4" />
              Cancel
            </button>
            <button
              type="submit"
              className="flex items-center gap-2 bg-indigo-500 text-white px-4 py-2 rounded-md hover:bg-indigo-600"
            >
              <Save className="w-4 h-4" />
              {editingCategory ? "Save Changes" : "Add Category"}
            </button>
          </div>
        </form>
      )}

      {/* Categories List */}
      <div className="bg-white shadow rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Description
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {categories.map((category) => (
              <tr key={category.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  {category.name}
                </td>
                <td className="px-6 py-4 text-sm text-gray-500">
                  {category.description}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm">
                  <button
                    onClick={() => handleEdit(category)}
                    className="text-indigo-600 hover:text-indigo-900 mr-4"
                  >
                    <Pencil className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => handleDelete(category.id)}
                    className="text-red-600 hover:text-red-900"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Categories;

================
File: components/dashboard/administrator/Comments.tsx
================
import React, { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import { Trash2, ChevronLeft, ChevronRight } from "lucide-react";
import { FaRegCircleUser } from "react-icons/fa6";

interface CommentWithDetails {
  id: string;
  content: string;
  id_photo: string;
  id_user: string;
  status: boolean;
  photo?: {
    name: string;
    path: string;
  };
  user?: {
    username: string;
    user_icon: string;
  };
}

const ITEMS_PER_PAGE = 10;

const AdminComments = () => {
  const [comments, setComments] = useState<CommentWithDetails[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [deletingId, setDeletingId] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);

  const totalPages = Math.ceil(comments.length / ITEMS_PER_PAGE);
  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
  const endIndex = startIndex + ITEMS_PER_PAGE;
  const currentComments = comments.slice(startIndex, endIndex);

  const fetchComments = async () => {
    try {
      const commentsResponse = await fetch("http://localhost:3000/comments", {
        credentials: "include",
        headers: { Accept: "application/json" },
      });

      if (!commentsResponse.ok) {
        throw new Error("Failed to fetch comments");
      }

      const commentsData = await commentsResponse.json();

      const enrichedComments = await Promise.all(
        commentsData.map(async (comment: CommentWithDetails) => {
          const [photoResponse, userResponse] = await Promise.all([
            fetch(`http://localhost:3000/photos/photo/${comment.id_photo}`, {
              headers: { Accept: "application/json" },
            }),
            fetch(`http://localhost:3000/user/user/${comment.id_user}`, {
              headers: { Accept: "application/json" },
            }),
          ]);

          const photoData = await photoResponse.json();
          const userData = await userResponse.json();

          return {
            ...comment,
            photo: photoData,
            user: userData[0],
          };
        })
      );

      setComments(enrichedComments);
    } catch (error) {
      setError(
        error instanceof Error ? error.message : "Failed to fetch comments"
      );
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchComments();
  }, []);

  const handleDelete = async (commentId: string) => {
    if (!window.confirm("Are you sure you want to delete this comment?")) {
      return;
    }

    setDeletingId(commentId);
    try {
      const response = await fetch(
        `http://localhost:3000/comments/delete/${commentId}`,
        {
          method: "DELETE",
          credentials: "include",
        }
      );

      if (!response.ok) {
        throw new Error("Failed to delete comment");
      }

      await fetchComments();
    } catch (error) {
      setError(
        error instanceof Error ? error.message : "Failed to delete comment"
      );
    } finally {
      setDeletingId(null);
    }
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[200px]">
        <div className="text-gray-600">Loading comments...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-[200px]">
        <div className="text-red-600">{error}</div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-semibold text-gray-800">
          Comment Management
        </h2>
        <div className="text-sm text-gray-600">
          Total Comments: {comments.length}
        </div>
      </div>

      <div className="bg-white shadow rounded-lg overflow-hidden">
        <div className="divide-y divide-gray-200">
          {currentComments.map((comment) => (
            <div
              key={comment.id}
              className="p-6 flex items-start space-x-6 hover:bg-gray-50"
            >
              <div className="flex-shrink-0">
                {comment.user?.user_icon ? (
                  <Image
                    src={comment.user.user_icon}
                    alt={`${comment.user.username}'s avatar`}
                    width={40}
                    height={40}
                    className="rounded-full object-cover"
                  />
                ) : (
                  <FaRegCircleUser className="w-10 h-10 text-gray-400" />
                )}
              </div>

              <div className="flex-grow">
                <div className="flex items-center justify-between">
                  <div className="text-sm">
                    <span className="font-medium text-gray-900">
                      {comment.user?.username}
                    </span>
                    <span className="text-gray-500 mx-2">commented on</span>
                    <Link
                      href={`/photo/${comment.id_photo}`}
                      className="text-indigo-600 hover:text-indigo-900 font-medium"
                    >
                      {comment.photo?.name}
                    </Link>
                  </div>
                  <button
                    onClick={() => handleDelete(comment.id)}
                    disabled={deletingId === comment.id}
                    className="text-red-600 hover:text-red-900 disabled:opacity-50"
                  >
                    <Trash2 className="w-5 h-5" />
                  </button>
                </div>
                <div className="mt-2 text-gray-700">{comment.content}</div>
              </div>
            </div>
          ))}

          {comments.length === 0 && (
            <div className="p-6 text-center text-gray-500">
              No comments found.
            </div>
          )}
        </div>
      </div>

      {/* Pagination Controls */}
      {totalPages > 1 && (
        <div className="flex justify-center items-center space-x-4 mt-6">
          <button
            onClick={() => handlePageChange(currentPage - 1)}
            disabled={currentPage === 1}
            className="p-2 rounded-md border disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronLeft className="w-5 h-5" />
          </button>

          <div className="flex space-x-2">
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
              <button
                key={page}
                onClick={() => handlePageChange(page)}
                className={`px-4 py-2 rounded-md ${
                  currentPage === page
                    ? "bg-indigo-500 text-white"
                    : "border hover:bg-gray-50"
                }`}
              >
                {page}
              </button>
            ))}
          </div>

          <button
            onClick={() => handlePageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
            className="p-2 rounded-md border disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronRight className="w-5 h-5" />
          </button>
        </div>
      )}
    </div>
  );
};

export default AdminComments;

================
File: components/dashboard/administrator/MyAccount.tsx
================
import React, { useState, useEffect, useRef } from "react";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { Trash2, Save, X } from "lucide-react";
import { FaRegCircleUser } from "react-icons/fa6";

const AdminMyAccount = () => {
  const router = useRouter();
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [user, setUser] = useState({
    id: "",
    username: "",
    email: "",
    user_icon: "",
    access_level: 1,
  });

  const [formData, setFormData] = useState({
    username: "",
    user_icon: null as File | null,
  });

  const [passwordData, setPasswordData] = useState({
    oldPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  const [previewUrl, setPreviewUrl] = useState<string>("");
  const [errors, setErrors] = useState({
    username: "",
    user_icon: "",
    oldPassword: "",
    newPassword: "",
    confirmPassword: "",
  });
  const [updateMessage, setUpdateMessage] = useState("");
  const [passwordMessage, setPasswordMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isPasswordLoading, setIsPasswordLoading] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const userId = localStorage.getItem("userId");
        if (!userId) {
          router.push("/login");
          return;
        }

        const response = await fetch(
          `http://localhost:3000/user/user/${userId}`,
          {
            credentials: "include",
            headers: { Accept: "application/json" },
          }
        );

        if (!response.ok) throw new Error("Failed to fetch user data");

        const userData = await response.json();
        const currentUser = userData[0];
        setUser(currentUser);
        setFormData((prev) => ({
          ...prev,
          username: currentUser.username,
        }));
        if (currentUser.user_icon) {
          setPreviewUrl(currentUser.user_icon);
        }
      } catch (error) {
        console.error("Error fetching user data:", error);
      }
    };

    fetchUserData();
  }, [router]);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (file.size > 8 * 1024 * 1024) {
        setErrors((prev) => ({
          ...prev,
          user_icon: "File size must be less than 8MB",
        }));
        return;
      }

      if (!file.type.startsWith("image/")) {
        setErrors((prev) => ({ ...prev, user_icon: "File must be an image" }));
        return;
      }

      setFormData((prev) => ({ ...prev, user_icon: file }));
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrl(reader.result as string);
      };
      reader.readAsDataURL(file);
      setErrors((prev) => ({ ...prev, user_icon: "" }));
    }
  };

  const clearImageSelection = () => {
    setFormData((prev) => ({ ...prev, user_icon: null }));
    setPreviewUrl(user.user_icon || "");
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const validateUserForm = () => {
    const newErrors = { ...errors };
    let isValid = true;

    if (!formData.username.trim()) {
      newErrors.username = "Username is required";
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  const validatePasswordForm = () => {
    const newErrors = { ...errors };
    let isValid = true;

    if (!passwordData.oldPassword) {
      newErrors.oldPassword = "Current password is required";
      isValid = false;
    }

    if (!passwordData.newPassword) {
      newErrors.newPassword = "New password is required";
      isValid = false;
    } else if (passwordData.newPassword.length < 6) {
      newErrors.newPassword = "Password must be at least 6 characters";
      isValid = false;
    }

    if (!passwordData.confirmPassword) {
      newErrors.confirmPassword = "Please confirm your new password";
      isValid = false;
    } else if (passwordData.newPassword !== passwordData.confirmPassword) {
      newErrors.confirmPassword = "Passwords do not match";
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  const handleUpdateUser = async () => {
    if (!validateUserForm()) return;
    setIsLoading(true);
    try {
      let imagePath = user.user_icon;

      if (formData.user_icon) {
        const fileData = new FormData();
        const fileIdentifier = crypto.randomUUID();
        fileData.append("file", formData.user_icon);
        fileData.append("identifier", fileIdentifier);

        const uploadResponse = await fetch("/api/upload", {
          method: "POST",
          body: fileData,
        });

        const uploadResult = await uploadResponse.json();
        if (!uploadResponse.ok) {
          throw new Error(uploadResult.error || "Failed to upload image");
        }

        imagePath = uploadResult.fileUrl;
      }

      const response = await fetch(
        `http://localhost:3000/user/changeuser/${user.id}`,
        {
          method: "PUT",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            username: formData.username,
            user_icon: imagePath,
          }),
        }
      );

      if (!response.ok) throw new Error("Failed to update profile");

      setUpdateMessage("Profile updated successfully!");
      localStorage.setItem("user_icon", imagePath);
      window.dispatchEvent(new Event("storage"));
    } catch (error) {
      setUpdateMessage("Failed to update profile");
    } finally {
      setIsLoading(false);
    }
  };

  const handlePasswordChange = async () => {
    if (!validatePasswordForm()) return;
    setIsPasswordLoading(true);
    try {
      const response = await fetch("http://localhost:3000/user/changepass", {
        method: "PUT",
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: user.email,
          currentPassword: passwordData.oldPassword,
          newPassword: passwordData.newPassword,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to change password");
      }

      setPasswordMessage("Password changed successfully!");
      setPasswordData({
        oldPassword: "",
        newPassword: "",
        confirmPassword: "",
      });
    } catch (error) {
      setPasswordMessage(
        error instanceof Error ? error.message : "Failed to change password"
      );
    } finally {
      setIsPasswordLoading(false);
    }
  };

  const handleDeleteAccount = async () => {
    if (
      !window.confirm(
        "Are you sure you want to delete your account? This action cannot be undone."
      )
    ) {
      return;
    }

    setIsDeleting(true);
    try {
      const response = await fetch(
        `http://localhost:3000/user/delete/${user.email}`,
        {
          method: "DELETE",
          credentials: "include",
        }
      );

      if (!response.ok) throw new Error("Failed to delete account");

      localStorage.removeItem("isLoggedIn");
      localStorage.removeItem("tokenExpires");
      localStorage.removeItem("userId");
      localStorage.removeItem("user_icon");
      window.dispatchEvent(new Event("logoutEvent"));
      router.push("/");
    } catch (error) {
      console.error("Error deleting account:", error);
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6 space-y-8">
      {/* Profile Section */}
      <div className="bg-white p-6 rounded-lg shadow space-y-6">
        <h2 className="text-xl font-semibold border-b pb-2">
          Administrator Profile
        </h2>

        {/* Profile Picture */}
        <div className="space-y-4">
          <div className="flex flex-col items-center gap-4">
            {previewUrl ? (
              <div className="relative">
                <Image
                  src={previewUrl}
                  alt="Profile preview"
                  width={100}
                  height={100}
                  className="rounded-full object-cover"
                />
                <button
                  onClick={clearImageSelection}
                  className="absolute top-0 right-0 bg-red-500 text-white rounded-full p-1"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            ) : (
              <FaRegCircleUser className="w-24 h-24 text-gray-400" />
            )}
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileChange}
              accept="image/*"
              className="hidden"
            />
            <button
              onClick={() => fileInputRef.current?.click()}
              className="bg-indigo-50 text-indigo-600 px-4 py-2 rounded-md hover:bg-indigo-100"
            >
              Change Profile Picture
            </button>
          </div>
          {errors.user_icon && (
            <p className="text-red-500 text-sm text-center">
              {errors.user_icon}
            </p>
          )}
        </div>

        {/* Username */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Username
          </label>
          <input
            type="text"
            value={formData.username}
            onChange={(e) =>
              setFormData((prev) => ({ ...prev, username: e.target.value }))
            }
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          />
          {errors.username && (
            <p className="text-red-500 text-sm mt-1">{errors.username}</p>
          )}
        </div>

        {/* Email */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Email
          </label>
          <input
            type="email"
            value={user.email}
            disabled
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-50"
          />
        </div>

        {updateMessage && (
          <p
            className={`text-sm ${
              updateMessage.includes("success")
                ? "text-green-600"
                : "text-red-600"
            }`}
          >
            {updateMessage}
          </p>
        )}

        <button
          onClick={handleUpdateUser}
          disabled={isLoading}
          className="flex items-center justify-center w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50"
        >
          <Save className="w-4 h-4 mr-2" />
          {isLoading ? "Saving..." : "Save Changes"}
        </button>
      </div>

      {/* Password Section */}
      <div className="bg-white p-6 rounded-lg shadow space-y-6">
        <h2 className="text-xl font-semibold border-b pb-2">Change Password</h2>

        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Current Password
            </label>
            <input
              type="password"
              value={passwordData.oldPassword}
              onChange={(e) =>
                setPasswordData((prev) => ({
                  ...prev,
                  oldPassword: e.target.value,
                }))
              }
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            />
            {errors.oldPassword && (
              <p className="text-red-500 text-sm mt-1">{errors.oldPassword}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              New Password
            </label>
            <input
              type="password"
              value={passwordData.newPassword}
              onChange={(e) =>
                setPasswordData((prev) => ({
                  ...prev,
                  newPassword: e.target.value,
                }))
              }
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            />
            {errors.newPassword && (
              <p className="text-red-500 text-sm mt-1">{errors.newPassword}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Confirm New Password
            </label>
            <input
              type="password"
              value={passwordData.confirmPassword}
              onChange={(e) =>
                setPasswordData((prev) => ({
                  ...prev,
                  confirmPassword: e.target.value,
                }))
              }
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            />
            {errors.confirmPassword && (
              <p className="text-red-500 text-sm mt-1">
                {errors.confirmPassword}
              </p>
            )}
          </div>
        </div>

        {passwordMessage && (
          <p
            className={`text-sm ${
              passwordMessage.includes("success")
                ? "text-green-600"
                : "text-red-600"
            }`}
          >
            {passwordMessage}
          </p>
        )}

        <button
          onClick={handlePasswordChange}
          disabled={isPasswordLoading}
          className="w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50"
        >
          {isPasswordLoading ? "Changing Password..." : "Change Password"}
        </button>
      </div>

      {/* Delete Account Section */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-red-600 border-b pb-2">
          Delete Account
        </h2>
        <p className="text-gray-600 my-4">
          Warning: Deleting your administrator account will remove all
          administrative privileges. Please ensure there is another
          administrator account before proceeding.
        </p>
        <button
          onClick={handleDeleteAccount}
          disabled={isDeleting}
          className="flex items-center justify-center w-full px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50"
        >
          <Trash2 className="w-4 h-4 mr-2" />
          {isDeleting ? "Deleting Account..." : "Delete Account"}
        </button>
      </div>
    </div>
  );
};

export default AdminMyAccount;

================
File: components/dashboard/administrator/Photos.tsx
================
import React, { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import { Trash2, ChevronLeft, ChevronRight } from "lucide-react";

interface Photo {
  id: string;
  user_id: string;
  name: string;
  description: string;
  path: string;
  status: boolean;
}

const ITEMS_PER_PAGE = 12;

const AdminPhotos = () => {
  const [photos, setPhotos] = useState<Photo[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [deletingId, setDeletingId] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);

  const totalPages = Math.ceil(photos.length / ITEMS_PER_PAGE);
  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
  const endIndex = startIndex + ITEMS_PER_PAGE;
  const currentPhotos = photos.slice(startIndex, endIndex);

  const fetchPhotos = async () => {
    try {
      const response = await fetch("http://localhost:3000/photos/admin", {
        credentials: "include",
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error("Failed to fetch photos");
      }

      const data = await response.json();
      setPhotos(data);
    } catch (error) {
      setError(
        error instanceof Error ? error.message : "Failed to fetch photos"
      );
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPhotos();
  }, []);

  const handleDelete = async (photoId: string) => {
    if (!window.confirm("Are you sure you want to delete this photo?")) {
      return;
    }

    setDeletingId(photoId);
    try {
      const response = await fetch(
        `http://localhost:3000/photos/delete/${photoId}`,
        {
          method: "DELETE",
          credentials: "include",
        }
      );

      if (!response.ok) {
        throw new Error("Failed to delete photo");
      }

      await fetchPhotos();
    } catch (error) {
      setError(
        error instanceof Error ? error.message : "Failed to delete photo"
      );
    } finally {
      setDeletingId(null);
    }
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  if (loading) {
    return <div className="text-center py-4">Loading photos...</div>;
  }

  if (error) {
    return <div className="text-red-500 text-center py-4">{error}</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-semibold text-gray-800">
          Photo Management
        </h2>
        <div className="text-sm text-gray-600">
          Total Photos: {photos.length}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {currentPhotos.map((photo) => (
          <div
            key={photo.id}
            className="bg-white rounded-lg shadow-md overflow-hidden"
          >
            <div className="relative h-48 w-full">
              <Link href={`/photo/${photo.id}`}>
                <Image
                  src={photo.path}
                  alt={photo.name}
                  fill
                  className="object-cover"
                />
              </Link>
            </div>
            <div className="p-4">
              <div className="flex justify-between items-start">
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-1">
                    {photo.name}
                  </h3>
                  <p className="text-sm text-gray-500 line-clamp-2">
                    {photo.description}
                  </p>
                </div>
                <button
                  onClick={() => handleDelete(photo.id)}
                  disabled={deletingId === photo.id}
                  className="text-red-600 hover:text-red-900 disabled:opacity-50"
                  title="Delete photo"
                >
                  <Trash2 className="w-5 h-5" />
                </button>
              </div>
              <div className="mt-2 flex items-center justify-between">
                <span
                  className={`px-2 py-1 rounded-full text-xs ${
                    photo.status
                      ? "bg-green-100 text-green-800"
                      : "bg-red-100 text-red-800"
                  }`}
                >
                  {photo.status ? "Visible" : "Hidden"}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>

      {photos.length === 0 && (
        <div className="text-center text-gray-500 py-8">No photos found.</div>
      )}

      {/* Pagination Controls */}
      {totalPages > 1 && (
        <div className="flex justify-center items-center space-x-4 mt-6">
          <button
            onClick={() => handlePageChange(currentPage - 1)}
            disabled={currentPage === 1}
            className="p-2 rounded-md border disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronLeft className="w-5 h-5" />
          </button>

          <div className="flex space-x-2">
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
              <button
                key={page}
                onClick={() => handlePageChange(page)}
                className={`px-4 py-2 rounded-md ${
                  currentPage === page
                    ? "bg-indigo-500 text-white"
                    : "border hover:bg-gray-50"
                }`}
              >
                {page}
              </button>
            ))}
          </div>

          <button
            onClick={() => handlePageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
            className="p-2 rounded-md border disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronRight className="w-5 h-5" />
          </button>
        </div>
      )}
    </div>
  );
};

export default AdminPhotos;

================
File: components/dashboard/administrator/Users.tsx
================
import React, { useState, useEffect } from "react";
import Image from "next/image";
import { FaRegCircleUser } from "react-icons/fa6";
import { Trash2, ChevronLeft, ChevronRight } from "lucide-react";

interface User {
  id: string;
  username: string;
  email: string;
  user_icon: string | null;
}

const ITEMS_PER_PAGE = 10;

const AdminUsers = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [deletingEmail, setDeletingEmail] = useState<string | null>(null);
  const [currentUserEmail, setCurrentUserEmail] = useState<string>("");
  const [currentPage, setCurrentPage] = useState(1);

  const totalPages = Math.ceil(users.length / ITEMS_PER_PAGE);
  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
  const endIndex = startIndex + ITEMS_PER_PAGE;
  const currentUsers = users.slice(startIndex, endIndex);

  useEffect(() => {
    const token = document.cookie
      .split("; ")
      .find((row) => row.startsWith("token="))
      ?.split("=")[1];

    if (token) {
      const payload = JSON.parse(atob(token.split(".")[1]));
      setCurrentUserEmail(payload.email);
    }
  }, []);

  const fetchUsers = async () => {
    try {
      const response = await fetch("http://localhost:3000/user/users", {
        credentials: "include",
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error("Failed to fetch users");
      }

      const data = await response.json();
      setUsers(data);
    } catch (error) {
      setError(
        error instanceof Error ? error.message : "Failed to fetch users"
      );
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const handleDelete = async (email: string) => {
    if (email === currentUserEmail) {
      if (
        !window.confirm(
          "Are you sure you want to delete your own admin account? This will log you out."
        )
      ) {
        return;
      }
    } else if (
      !window.confirm(`Are you sure you want to delete the user: ${email}?`)
    ) {
      return;
    }

    setDeletingEmail(email);
    try {
      const response = await fetch(
        `http://localhost:3000/user/delete/${email}`,
        {
          method: "DELETE",
          credentials: "include",
        }
      );

      if (!response.ok) {
        throw new Error("Failed to delete user");
      }

      if (email === currentUserEmail) {
        localStorage.clear();
        window.location.href = "/login";
      } else {
        await fetchUsers();
      }
    } catch (error) {
      setError(
        error instanceof Error ? error.message : "Failed to delete user"
      );
    } finally {
      setDeletingEmail(null);
    }
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  if (loading) {
    return <div className="text-center py-4">Loading users...</div>;
  }

  if (error) {
    return <div className="text-red-500 text-center py-4">{error}</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-semibold text-gray-800">
          User Management
        </h2>
        <div className="text-sm text-gray-600">Total Users: {users.length}</div>
      </div>

      <div className="bg-white shadow rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                User
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Email
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {currentUsers.map((user) => (
              <tr key={user.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 h-10 w-10 rounded-full overflow-hidden">
                      {user.user_icon ? (
                        <Image
                          src={user.user_icon}
                          alt={`${user.username}'s avatar`}
                          width={40}
                          height={40}
                          className="w-full h-full object-cover rounded-full"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center bg-gray-100 rounded-full">
                          <FaRegCircleUser className="w-8 h-8 text-gray-400" />
                        </div>
                      )}
                    </div>
                    <div className="ml-4">
                      <div className="text-sm font-medium text-gray-900">
                        {user.username}
                      </div>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-500">{user.email}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <button
                    onClick={() => handleDelete(user.email)}
                    disabled={deletingEmail === user.email}
                    className={`text-red-600 hover:text-red-900 disabled:opacity-50 
                      ${
                        user.email === currentUserEmail
                          ? "border-b border-red-600"
                          : ""
                      }`}
                    title={
                      user.email === currentUserEmail
                        ? "This is your account"
                        : "Delete user"
                    }
                  >
                    <Trash2 className="w-5 h-5" />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination Controls */}
      {totalPages > 1 && (
        <div className="flex justify-center items-center space-x-4 mt-6">
          <button
            onClick={() => handlePageChange(currentPage - 1)}
            disabled={currentPage === 1}
            className="p-2 rounded-md border disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronLeft className="w-5 h-5" />
          </button>

          <div className="flex space-x-2">
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
              <button
                key={page}
                onClick={() => handlePageChange(page)}
                className={`px-4 py-2 rounded-md ${
                  currentPage === page
                    ? "bg-indigo-500 text-white"
                    : "border hover:bg-gray-50"
                }`}
              >
                {page}
              </button>
            ))}
          </div>

          <button
            onClick={() => handlePageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
            className="p-2 rounded-md border disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronRight className="w-5 h-5" />
          </button>
        </div>
      )}
    </div>
  );
};

export default AdminUsers;

================
File: components/dashboard/user/AddPhotoForm.tsx
================
import React, {
  useState,
  useRef,
  useMemo,
  useCallback,
  useEffect,
} from "react";
import { createEditor, Descendant, BaseEditor } from "slate";
import { Slate, Editable, withReact, ReactEditor } from "slate-react";
import { withHistory } from "slate-history";
import { Upload, X } from "lucide-react";
import Image from "next/image";
import { Category } from "@/app/utils/interfaces";

// Define custom types for plain text
type CustomElement = {
  type: "paragraph";
  children: CustomText[];
};

type CustomText = {
  text: string;
};

// Extend Slate's custom types
declare module "slate" {
  interface CustomTypes {
    Editor: BaseEditor & ReactEditor;
    Element: CustomElement;
    Text: CustomText;
  }
}

const initialEditorValue: Descendant[] = [
  {
    type: "paragraph",
    children: [{ text: "" }],
  },
];

const AddPhotoForm = () => {
  const [formData, setFormData] = useState({
    name: "",
    status: true, // visible by default
  });

  const [photo, setPhoto] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string>("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const [uploadedPhotoId, setUploadedPhotoId] = useState<string>("");
  const [error, setError] = useState("");

  const [categories, setCategories] = useState<Category[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>("");
  const [categoryError, setcategoryError] = useState("");

  const fileInputRef = useRef<HTMLInputElement>(null);
  const editor = useMemo(() => withHistory(withReact(createEditor())), []);
  const [editorValue, setEditorValue] =
    useState<Descendant[]>(initialEditorValue);

  const renderElement = useCallback((props: any) => {
    return <p {...props.attributes}>{props.children}</p>;
  }, []);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await fetch("http://localhost:3000/categories", {
          headers: { Accept: "application/json" },
        });

        if (!response.ok) {
          throw new Error("Failed to fetch categories");
        }

        const data = await response.json();
        setCategories(data);
      } catch (error) {
        console.error("Error fetching categories:", error);
        setcategoryError("Failed to load categories");
      }
    };

    fetchCategories();
  }, []);

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (file.size > 8 * 1024 * 1024) {
        // 8MB limit
        setError("File size must be less than 8MB");
        return;
      }

      if (!file.type.startsWith("image/")) {
        setError("File must be an image");
        return;
      }

      setPhoto(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrl(reader.result as string);
      };
      reader.readAsDataURL(file);
      setError("");
    }
  };

  const clearForm = () => {
    setFormData({ name: "", status: true });
    setPhoto(null);
    setPreviewUrl("");
    setEditorValue(initialEditorValue);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
    setError("");
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!photo) {
      setError("Please select a photo to upload");
      return;
    }
    if (!formData.name.trim()) {
      setError("Please enter a name for the photo");
      return;
    }

    setIsSubmitting(true);
    setError("");

    try {
      // First upload the photo file
      const fileData = new FormData();
      const fileIdentifier = crypto.randomUUID();
      fileData.append("file", photo);
      fileData.append("identifier", fileIdentifier);

      const uploadResponse = await fetch("/api/upload", {
        method: "POST",
        body: fileData,
      });

      const uploadResult = await uploadResponse.json();
      if (!uploadResponse.ok) {
        throw new Error(uploadResult.error || "Failed to upload photo");
      }

      // Then create the photo record
      const photoData = {
        name: formData.name,
        description: editorValue
          .map((node) => {
            if ("children" in node) {
              return (node.children[0] as CustomText).text;
            }
            return "";
          })
          .join("\n")
          .trim(),
        path: uploadResult.fileUrl,
        status: formData.status,
      };

      const createResponse = await fetch(
        "http://localhost:3000/photos/add_photo",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify(photoData),
        }
      );

      const createResult = await createResponse.json();
      if (!createResponse.ok) {
        throw new Error(
          createResult.message || "Failed to create photo record"
        );
      }

      setUploadedPhotoId(createResult.id);

      if (selectedCategory) {
        await fetch(`http://localhost:3000/photos_categories/add`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify({
            photo_id: uploadedPhotoId,
            category_id: selectedCategory,
          }),
        });
      }

      setUploadSuccess(true);
      clearForm();
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to upload photo");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (uploadSuccess) {
    return (
      <div className="text-center p-6">
        <p className="text-green-600 mb-4">Photo uploaded successfully!</p>
        <button
          onClick={() => setUploadSuccess(false)}
          className="text-white bg-indigo-500 hover:bg-indigo-600 px-4 py-2 rounded mt-4"
        >
          Upload Another Photo
        </button>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="max-w-2xl mx-auto p-6 space-y-6">
      <div className="space-y-4">
        {/* Photo Upload */}
        <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
          {previewUrl ? (
            <div className="relative">
              <Image
                src={previewUrl}
                alt="Preview"
                width={300}
                height={300}
                className="mx-auto object-contain max-h-[300px]"
              />
              <button
                type="button"
                onClick={() => {
                  setPhoto(null);
                  setPreviewUrl("");
                  if (fileInputRef.current) {
                    fileInputRef.current.value = "";
                  }
                }}
                className="absolute top-0 right-0 p-1 bg-red-500 text-white rounded-full"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          ) : (
            <div
              onClick={() => fileInputRef.current?.click()}
              className="cursor-pointer"
            >
              <Upload className="w-12 h-12 mx-auto text-gray-400" />
              <p className="mt-2 text-sm text-gray-500">
                Click to upload a photo
              </p>
            </div>
          )}
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileSelect}
            accept="image/*"
            className="hidden"
          />
        </div>

        {/* Name Field */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Name
          </label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          />
        </div>

        {/* Category Field */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700">
            Category
          </label>
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          >
            <option value="">Select a category</option>
            {categories.map((category) => (
              <option key={category.id} value={category.id}>
                {category.name}
              </option>
            ))}
          </select>
          {categoryError && (
            <p className="text-red-500 text-sm mt-1">{categoryError}</p>
          )}
        </div>

        {/* Description Field */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Description
          </label>
          <div className="mt-1 border border-gray-300 rounded-md">
            <Slate
              editor={editor}
              initialValue={editorValue}
              onChange={(value) => setEditorValue(value)}
            >
              <Editable
                className="h-[150px] p-2"
                placeholder="Enter a description..."
                renderElement={renderElement}
              />
            </Slate>
          </div>
        </div>

        {/* Status Toggle */}
        <div className="flex items-center space-x-3">
          <label className="text-sm font-medium text-gray-700">Status:</label>
          <label className="inline-flex items-center">
            <input
              type="radio"
              checked={formData.status}
              onChange={() => setFormData({ ...formData, status: true })}
              className="form-radio text-indigo-600"
            />
            <span className="ml-2">Visible</span>
          </label>
          <label className="inline-flex items-center">
            <input
              type="radio"
              checked={!formData.status}
              onChange={() => setFormData({ ...formData, status: false })}
              className="form-radio text-indigo-600"
            />
            <span className="ml-2">Hidden</span>
          </label>
        </div>

        {error && <p className="text-red-500 text-sm">{error}</p>}

        {/* Action Buttons */}
        <div className="flex justify-end space-x-3">
          <button
            type="button"
            onClick={clearForm}
            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting}
            className="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 disabled:opacity-50"
          >
            {isSubmitting ? "Saving..." : "Save"}
          </button>
        </div>
      </div>
    </form>
  );
};

export default AddPhotoForm;

================
File: components/dashboard/user/Downloads.tsx
================
"use client";
import React, { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import { Photo } from "../../../utils/interfaces";

interface Download {
  id: string;
  id_photo: string;
  id_user: string;
}

export const Downloads = () => {
  const [downloadedPhotos, setDownloadedPhotos] = useState<Photo[]>([]);
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchDownloadedPhotos = async () => {
      try {
        const userId = localStorage.getItem("userId");
        if (!userId) {
          throw new Error("User ID not found");
        }

        // First fetch the downloads list
        const downloadsResponse = await fetch(
          `http://localhost:3000/downloads/user/${userId}`,
          {
            headers: {
              Accept: "application/json",
            },
            credentials: "include",
          }
        );

        if (!downloadsResponse.ok) {
          throw new Error(`HTTP error! status: ${downloadsResponse.status}`);
        }

        const downloads = await downloadsResponse.json();

        // Then fetch each photo's details
        const photoPromises = downloads.map((download: Download) =>
          fetch(`http://localhost:3000/photos/photo/${download.id_photo}`, {
            headers: {
              Accept: "application/json",
            },
            credentials: "include",
          }).then((res) => res.json())
        );

        const photos = await Promise.all(photoPromises);
        setDownloadedPhotos(photos);
      } catch (error) {
        console.error("Error fetching downloads:", error);
        setError(
          error instanceof Error ? error.message : "Failed to fetch downloads"
        );
      } finally {
        setLoading(false);
      }
    };

    fetchDownloadedPhotos();
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (!downloadedPhotos?.length) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-600 mb-4">
          It&apos;s too quiet here. Would you like to download a photo?
        </p>
        <Link
          href="/"
          className="text-indigo-600 hover:text-indigo-800 font-medium transition-colors duration-200"
        >
          Browse Photos
        </Link>
      </div>
    );
  }

  return (
    <div className="flex flex-wrap justify-around gap-[30px] mt-5 mx-2 md:mx-8">
      {downloadedPhotos.map((photo) => (
        <div
          key={photo.id}
          className="
            p-[15px] pb-[60px] 
            shadow-[5px_15px_15px_rgb(225,225,225)] 
            h-full relative
            hover:shadow-[-5px_15px_15px_rgb(225,225,225)] 
            hover:scale-[1.1] 
            transition-all duration-500 
            after:content-[attr(polaroid-caption)] 
            after:absolute after:bottom-0 after:left-0 
            after:w-full after:text-center 
            after:p-[10px] after:text-[30px]
            after:transition-all after:opacity-50 
            after:hover:opacity-100 after:duration-1000
            mx-auto
            border border-1 border-gray-100
          "
          polaroid-caption={photo.name}
        >
          <Link href={`/photo/${photo.id}`}>
            <Image
              src={photo.path}
              width={0}
              height={0}
              alt={photo.name}
              sizes="100vw"
              className="max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto"
            />
          </Link>
        </div>
      ))}
    </div>
  );
};

================
File: components/dashboard/user/MyAccount.tsx
================
import React, { useState, useEffect, useRef } from "react";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { Trash2, Save, X } from "lucide-react";
import { FaRegCircleUser } from "react-icons/fa6";

const MyAccount = () => {
  const router = useRouter();
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [user, setUser] = useState({
    id: "",
    username: "",
    email: "",
    user_icon: "",
  });

  const [formData, setFormData] = useState({
    username: "",
    user_icon: null as File | null,
  });

  const [passwordData, setPasswordData] = useState({
    oldPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  const [previewUrl, setPreviewUrl] = useState<string>("");
  const [errors, setErrors] = useState({
    username: "",
    user_icon: "",
    oldPassword: "",
    newPassword: "",
    confirmPassword: "",
  });
  const [updateMessage, setUpdateMessage] = useState("");
  const [passwordMessage, setPasswordMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isPasswordLoading, setIsPasswordLoading] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const userId = localStorage.getItem("userId");
        if (!userId) {
          router.push("/login");
          return;
        }

        const response = await fetch(
          `http://localhost:3000/user/user/${userId}`,
          {
            credentials: "include",
            headers: { Accept: "application/json" },
          }
        );

        if (!response.ok) throw new Error("Failed to fetch user data");

        const userData = await response.json();
        const currentUser = userData[0];
        setUser(currentUser);
        setFormData((prev) => ({
          ...prev,
          username: currentUser.username,
        }));
        if (currentUser.user_icon) {
          setPreviewUrl(currentUser.user_icon);
        }
      } catch (error) {
        console.error("Error fetching user data:", error);
      }
    };

    fetchUserData();
  }, [router]);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (file.size > 8 * 1024 * 1024) {
        setErrors((prev) => ({
          ...prev,
          user_icon: "File size must be less than 8MB",
        }));
        return;
      }

      if (!file.type.startsWith("image/")) {
        setErrors((prev) => ({ ...prev, user_icon: "File must be an image" }));
        return;
      }

      setFormData((prev) => ({ ...prev, user_icon: file }));
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrl(reader.result as string);
      };
      reader.readAsDataURL(file);
      setErrors((prev) => ({ ...prev, user_icon: "" }));
    }
  };

  const clearImageSelection = () => {
    setFormData((prev) => ({ ...prev, user_icon: null }));
    setPreviewUrl(user.user_icon || "");
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const validateUserForm = () => {
    const newErrors = { ...errors };
    let isValid = true;

    if (!formData.username.trim()) {
      newErrors.username = "Username is required";
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  const validatePasswordForm = () => {
    const newErrors = { ...errors };
    let isValid = true;

    if (!passwordData.oldPassword) {
      newErrors.oldPassword = "Current password is required";
      isValid = false;
    }

    if (!passwordData.newPassword) {
      newErrors.newPassword = "New password is required";
      isValid = false;
    } else if (passwordData.newPassword.length < 6) {
      newErrors.newPassword = "Password must be at least 6 characters";
      isValid = false;
    }

    if (!passwordData.confirmPassword) {
      newErrors.confirmPassword = "Please confirm your new password";
      isValid = false;
    } else if (passwordData.newPassword !== passwordData.confirmPassword) {
      newErrors.confirmPassword = "Passwords do not match";
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  const handleUpdateUser = async () => {
    if (!validateUserForm()) return;
    setIsLoading(true);
    try {
      let imagePath = user.user_icon;

      if (formData.user_icon) {
        const fileData = new FormData();
        const fileIdentifier = crypto.randomUUID();
        fileData.append("file", formData.user_icon);
        fileData.append("identifier", fileIdentifier);

        const uploadResponse = await fetch("/api/upload", {
          method: "POST",
          body: fileData,
        });

        const uploadResult = await uploadResponse.json();
        if (!uploadResponse.ok) {
          throw new Error(uploadResult.error || "Failed to upload image");
        }

        imagePath = uploadResult.fileUrl;
      }

      const response = await fetch(
        `http://localhost:3000/user/changeuser/${user.id}`,
        {
          method: "PUT",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            username: formData.username,
            user_icon: imagePath,
          }),
        }
      );

      if (!response.ok) throw new Error("Failed to update profile");

      setUpdateMessage("Profile updated successfully!");
      localStorage.setItem("user_icon", imagePath);
      window.dispatchEvent(new Event("storage"));
    } catch (error) {
      setUpdateMessage("Failed to update profile");
    } finally {
      setIsLoading(false);
    }
  };

  const handlePasswordChange = async () => {
    if (!validatePasswordForm()) return;
    setIsPasswordLoading(true);
    try {
      const response = await fetch("http://localhost:3000/user/changepass", {
        method: "PUT",
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: user.email,
          currentPassword: passwordData.oldPassword, // Changed from oldPassword to currentPassword
          newPassword: passwordData.newPassword,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to change password");
      }

      setPasswordMessage("Password changed successfully!");
      setPasswordData({
        oldPassword: "",
        newPassword: "",
        confirmPassword: "",
      });
    } catch (error) {
      setPasswordMessage(
        error instanceof Error ? error.message : "Failed to change password"
      );
    } finally {
      setIsPasswordLoading(false);
    }
  };

  const handleDeleteAccount = async () => {
    if (
      !window.confirm(
        "Are you sure you want to delete your account? This action cannot be undone."
      )
    ) {
      return;
    }

    setIsDeleting(true);
    try {
      const response = await fetch(
        `http://localhost:3000/user/delete/${user.email}`,
        {
          method: "DELETE",
          credentials: "include",
        }
      );

      if (!response.ok) throw new Error("Failed to delete account");

      localStorage.removeItem("isLoggedIn");
      localStorage.removeItem("tokenExpires");
      localStorage.removeItem("userId");
      localStorage.removeItem("user_icon");
      window.dispatchEvent(new Event("logoutEvent"));
      router.push("/");
    } catch (error) {
      console.error("Error deleting account:", error);
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6 space-y-8">
      {/* Profile Section */}
      <div className="bg-white p-6 rounded-lg shadow space-y-6">
        <h2 className="text-xl font-semibold border-b pb-2">
          Profile Information
        </h2>

        {/* Profile Picture */}
        <div className="space-y-4">
          <div className="flex flex-col items-center gap-4">
            {previewUrl ? (
              <div className="relative">
                <Image
                  src={previewUrl}
                  alt="Profile preview"
                  width={100}
                  height={100}
                  className="rounded-full object-cover"
                />
                <button
                  onClick={clearImageSelection}
                  className="absolute top-0 right-0 bg-red-500 text-white rounded-full p-1"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            ) : (
              <FaRegCircleUser className="w-24 h-24 text-gray-400" />
            )}
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileChange}
              accept="image/*"
              className="hidden"
            />
            <button
              onClick={() => fileInputRef.current?.click()}
              className="bg-indigo-50 text-indigo-600 px-4 py-2 rounded-md hover:bg-indigo-100"
            >
              Change Profile Picture
            </button>
          </div>
          {errors.user_icon && (
            <p className="text-red-500 text-sm text-center">
              {errors.user_icon}
            </p>
          )}
        </div>

        {/* Username */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Username
          </label>
          <input
            type="text"
            value={formData.username}
            onChange={(e) =>
              setFormData((prev) => ({ ...prev, username: e.target.value }))
            }
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          />
          {errors.username && (
            <p className="text-red-500 text-sm mt-1">{errors.username}</p>
          )}
        </div>

        {/* Email */}
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Email
          </label>
          <input
            type="email"
            value={user.email}
            disabled
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-50"
          />
        </div>

        {updateMessage && (
          <p
            className={`text-sm ${
              updateMessage.includes("success")
                ? "text-green-600"
                : "text-red-600"
            }`}
          >
            {updateMessage}
          </p>
        )}

        <button
          onClick={handleUpdateUser}
          disabled={isLoading}
          className="flex items-center justify-center w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50"
        >
          <Save className="w-4 h-4 mr-2" />
          {isLoading ? "Saving..." : "Save Changes"}
        </button>
      </div>

      {/* Password Section */}
      <div className="bg-white p-6 rounded-lg shadow space-y-6">
        <h2 className="text-xl font-semibold border-b pb-2">Change Password</h2>

        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Current Password
            </label>
            <input
              type="password"
              value={passwordData.oldPassword}
              onChange={(e) =>
                setPasswordData((prev) => ({
                  ...prev,
                  oldPassword: e.target.value,
                }))
              }
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            />
            {errors.oldPassword && (
              <p className="text-red-500 text-sm mt-1">{errors.oldPassword}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              New Password
            </label>
            <input
              type="password"
              value={passwordData.newPassword}
              onChange={(e) =>
                setPasswordData((prev) => ({
                  ...prev,
                  newPassword: e.target.value,
                }))
              }
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            />
            {errors.newPassword && (
              <p className="text-red-500 text-sm mt-1">{errors.newPassword}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Confirm New Password
            </label>
            <input
              type="password"
              value={passwordData.confirmPassword}
              onChange={(e) =>
                setPasswordData((prev) => ({
                  ...prev,
                  confirmPassword: e.target.value,
                }))
              }
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            />
            {errors.confirmPassword && (
              <p className="text-red-500 text-sm mt-1">
                {errors.confirmPassword}
              </p>
            )}
          </div>
        </div>

        {passwordMessage && (
          <p
            className={`text-sm ${
              passwordMessage.includes("success")
                ? "text-green-600"
                : "text-red-600"
            }`}
          >
            {passwordMessage}
          </p>
        )}

        <button
          onClick={handlePasswordChange}
          disabled={isPasswordLoading}
          className="w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50"
        >
          {isPasswordLoading ? "Changing Password..." : "Change Password"}
        </button>
      </div>

      {/* Delete Account Section */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-red-600 border-b pb-2">
          Delete Account
        </h2>
        <p className="text-gray-600 my-4">
          Once you delete your account, there is no going back. Please be
          certain.
        </p>
        <button
          onClick={handleDeleteAccount}
          disabled={isDeleting}
          className="flex items-center justify-center w-full px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50"
        >
          <Trash2 className="w-4 h-4 mr-2" />
          {isDeleting ? "Deleting Account..." : "Delete Account"}
        </button>
      </div>
    </div>
  );
};

export default MyAccount;

================
File: components/dashboard/user/MyComments.tsx
================
import React, { useState, useEffect, useMemo, useCallback } from "react";
import Image from "next/image";
import Link from "next/link";
import { createEditor, Descendant, BaseEditor } from "slate";
import { Slate, Editable, withReact, ReactEditor } from "slate-react";
import { withHistory } from "slate-history";
import { ArrowLeft, Save, Trash2 } from "lucide-react";

// Define custom types for plain text editor
type CustomElement = {
  type: "paragraph";
  children: CustomText[];
};

type CustomText = {
  text: string;
};

declare module "slate" {
  interface CustomTypes {
    Editor: BaseEditor & ReactEditor;
    Element: CustomElement;
    Text: CustomText;
  }
}

interface CommentWithUser {
  comment_id: string;
  comment_status: boolean;
  content: string;
  photo_id: string;
  photo_name: string;
  photo_status: boolean;
  user_icon: string;
  username: string;
  photo?: {
    name: string;
    path: string;
  };
}

const initialValue: Descendant[] = [
  {
    type: "paragraph",
    children: [{ text: "" }],
  },
];

export const MyComments = () => {
  const [comments, setComments] = useState<CommentWithUser[]>([]);
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState(true);
  const [editingComment, setEditingComment] = useState<CommentWithUser | null>(
    null
  );
  const [isSaving, setIsSaving] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  const editor = useMemo(() => withHistory(withReact(createEditor())), []);
  const [editorValue, setEditorValue] = useState<Descendant[]>(initialValue);

  const renderElement = useCallback((props: any) => {
    return <p {...props.attributes}>{props.children}</p>;
  }, []);

  const fetchComments = async () => {
    try {
      const userId = localStorage.getItem("userId");
      if (!userId) {
        throw new Error("User ID not found");
      }

      const commentsResponse = await fetch(
        `http://localhost:3000/comments/user/${userId}`,
        {
          headers: { Accept: "application/json" },
          credentials: "include",
        }
      );

      if (!commentsResponse.ok) {
        throw new Error("Failed to fetch data");
      }

      const commentsData = await commentsResponse.json();

      // Fetch photo details for each comment
      const commentsWithPhotos = await Promise.all(
        commentsData.map(async (comment: CommentWithUser) => {
          const photoResponse = await fetch(
            `http://localhost:3000/photos/photo/${comment.photo_id}`,
            {
              headers: {
                Accept: "application/json",
              },
            }
          );

          if (!photoResponse.ok) {
            throw new Error(
              `Failed to fetch photo for comment ${comment.comment_id}`
            );
          }

          const photoData = await photoResponse.json();
          return {
            ...comment,
            photo: {
              name: photoData.name,
              path: photoData.path,
            },
          };
        })
      );
      setComments(commentsWithPhotos);
    } catch (error) {
      setError(
        error instanceof Error ? error.message : "Failed to fetch comments"
      );
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchComments();
  }, []);

  const handleEditClick = (comment: CommentWithUser) => {
    setEditingComment(comment);
    setEditorValue([
      {
        type: "paragraph",
        children: [{ text: comment.content || "" }],
      },
    ]);
  };

  const handleSave = async () => {
    if (!editingComment) return;

    try {
      setIsSaving(true);
      const content = editorValue
        .map((node) => {
          if ("children" in node) {
            return (node.children[0] as CustomText).text;
          }
          return "";
        })
        .join("\n")
        .trim();

      const response = await fetch(
        `http://localhost:3000/comments/edit/${editingComment.comment_id}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          credentials: "include",
          body: JSON.stringify({ content }),
        }
      );

      if (!response.ok) {
        throw new Error("Failed to update comment");
      }

      // Refresh comments list
      await fetchComments();
      setEditingComment(null);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to update comment");
    } finally {
      setIsSaving(false);
    }
  };

  const handleDelete = async () => {
    if (!editingComment) return;

    if (
      !window.confirm(
        "Are you sure you want to delete this comment? This action cannot be undone."
      )
    ) {
      return;
    }

    try {
      setIsDeleting(true);
      const response = await fetch(
        `http://localhost:3000/comments/delete/${editingComment.comment_id}`,
        {
          method: "DELETE",
          credentials: "include",
        }
      );

      if (!response.ok) {
        throw new Error("Failed to delete comment");
      }

      // Refresh comments list
      await fetchComments();
      setEditingComment(null);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to delete comment");
    } finally {
      setIsDeleting(false);
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (editingComment) {
    return (
      <div className="max-w-4xl mx-auto p-6 space-y-8">
        <div className="flex items-center">
          <button
            onClick={() => setEditingComment(null)}
            className="flex items-center text-gray-600 hover:text-gray-900"
          >
            <ArrowLeft className="w-5 h-5 mr-2" />
            Back to My Comments
          </button>
        </div>

        {/* Updated photo preview */}
        {editingComment && editingComment.photo && (
          <div className="relative w-full h-[400px]">
            <Image
              src={editingComment.photo.path}
              alt={editingComment.photo.name}
              fill
              className="object-contain rounded-lg"
            />
          </div>
        )}

        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Comment Content
            </label>
            <div className="border border-gray-300 rounded-md">
              <Slate
                editor={editor}
                initialValue={editorValue}
                onChange={(value) => setEditorValue(value)}
              >
                <Editable
                  className="min-h-[150px] p-2"
                  placeholder="Enter your comment..."
                  renderElement={renderElement}
                />
              </Slate>
            </div>
          </div>

          <div className="flex space-x-4">
            <button
              onClick={handleSave}
              disabled={isSaving}
              className="flex items-center px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 disabled:opacity-50"
            >
              <Save className="w-4 h-4 mr-2" />
              {isSaving ? "Saving..." : "Save Changes"}
            </button>
            <button
              onClick={handleDelete}
              disabled={isDeleting}
              className="flex items-center px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 disabled:opacity-50"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              {isDeleting ? "Deleting..." : "Delete Comment"}
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!comments.length) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-600 mb-4">
          You haven&apos;t made any comments yet.
        </p>
        <Link
          href="/"
          className="text-indigo-600 hover:text-indigo-800 font-medium transition-colors duration-200"
        >
          Browse Photos
        </Link>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-4">
      {comments.map((comment) => (
        <div
          key={comment.comment_id}
          className="bg-white rounded-lg shadow-md p-6 flex flex-col md:flex-row gap-6"
        >
          <div className="w-full md:w-1/4">
            <Link href={`/photo/${comment.photo_id}`}>
              <div className="relative w-full pt-[100%]">
                <Image
                  src={
                    comment.photo?.path ||
                    `http://localhost:3000/photos/photo/${comment.photo_id}`
                  }
                  alt={comment.photo?.name || comment.photo_name}
                  fill
                  className="absolute top-0 left-0 w-full h-full object-cover rounded-lg"
                />
              </div>
            </Link>
          </div>

          <div className="flex-1">
            <Link
              href={`/photo/${comment.photo_id}`}
              className="text-lg font-semibold text-indigo-600 hover:text-indigo-800 mb-2 block"
            >
              {comment.photo?.name || comment.photo_name}
            </Link>
            <p className="text-gray-700 mt-2">{comment.content}</p>
            <button
              onClick={() => handleEditClick(comment)}
              className="mt-4 text-indigo-600 hover:text-indigo-800"
            >
              Edit Comment
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default MyComments;

================
File: components/dashboard/user/MyLikes.tsx
================
import React, { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import { Photo } from "../../../utils/interfaces";

interface Like {
  id: string;
  id_photo: string;
  id_user: string;
}

const MyLikes = () => {
  const [likedPhotos, setLikedPhotos] = useState<Photo[]>([]);
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchLikedPhotos = async () => {
      try {
        const userId = localStorage.getItem("userId");
        if (!userId) {
          throw new Error("User ID not found");
        }

        // First fetch the likes list
        const likesResponse = await fetch(
          `http://localhost:3000/likes/user/${userId}`,
          {
            headers: {
              Accept: "application/json",
            },
            credentials: "include",
          }
        );

        if (!likesResponse.ok) {
          throw new Error(`HTTP error! status: ${likesResponse.status}`);
        }

        const likes = await likesResponse.json();

        // Then fetch each photo's details
        const photoPromises = likes.map((like: Like) =>
          fetch(`http://localhost:3000/photos/photo/${like.id_photo}`, {
            headers: {
              Accept: "application/json",
            },
            credentials: "include",
          }).then((res) => res.json())
        );

        const photos = await Promise.all(photoPromises);
        // Filter out any photos that might be private or deleted
        const validPhotos = photos.filter(
          (photo: Photo) => photo && photo.status
        );
        setLikedPhotos(validPhotos);
      } catch (error) {
        console.error("Error fetching likes:", error);
        setError(
          error instanceof Error ? error.message : "Failed to fetch likes"
        );
      } finally {
        setLoading(false);
      }
    };

    fetchLikedPhotos();
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (!likedPhotos?.length) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-600 mb-4">
          You haven&apos;t liked any photos yet. Find some photos you love!
        </p>
        <Link
          href="/"
          className="text-indigo-600 hover:text-indigo-800 font-medium transition-colors duration-200"
        >
          Browse Photos
        </Link>
      </div>
    );
  }

  return (
    <div className="flex flex-wrap justify-around gap-[30px] mt-5 mx-2 md:mx-8">
      {likedPhotos.map((photo) => (
        <div
          key={photo.id}
          className="
            p-[15px] pb-[60px] 
            shadow-[5px_15px_15px_rgb(225,225,225)] 
            h-full relative
            hover:shadow-[-5px_15px_15px_rgb(225,225,225)] 
            hover:scale-[1.1] 
            transition-all duration-500 
            after:content-[attr(polaroid-caption)] 
            after:absolute after:bottom-0 after:left-0 
            after:w-full after:text-center 
            after:p-[10px] after:text-[30px]
            after:transition-all after:opacity-50 
            after:hover:opacity-100 after:duration-1000
            mx-auto
            border border-1 border-gray-100
          "
          polaroid-caption={photo.name}
        >
          <Link href={`/photo/${photo.id}`}>
            <Image
              src={photo.path}
              width={0}
              height={0}
              alt={photo.name}
              sizes="100vw"
              className="max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto"
            />
          </Link>
        </div>
      ))}
    </div>
  );
};

export default MyLikes;

================
File: components/dashboard/user/MyPhotos.tsx
================
import React, { useState, useEffect, useMemo, useCallback } from "react";
import Image from "next/image";
import { createEditor, Descendant, BaseEditor } from "slate";
import { Slate, Editable, withReact, ReactEditor } from "slate-react";
import { withHistory } from "slate-history";
import { Photo, Comment, User, Category } from "@/app/utils/interfaces";
import { ArrowLeft, Save, Trash2 } from "lucide-react";
import { FaRegCircleUser } from "react-icons/fa6";

// Define custom types for plain text editor
type CustomElement = {
  type: "paragraph";
  children: CustomText[];
};

type CustomText = {
  text: string;
};

declare module "slate" {
  interface CustomTypes {
    Editor: BaseEditor & ReactEditor;
    Element: CustomElement;
    Text: CustomText;
  }
}

const initialValue: Descendant[] = [
  {
    type: "paragraph",
    children: [{ text: "" }],
  },
];

interface CommentWithUser extends Comment {
  username?: string;
  user_icon?: string;
}

export const MyPhotos = () => {
  const [images, setImages] = useState<Photo[]>();
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState(true);
  const [editingPhoto, setEditingPhoto] = useState<Photo | null>(null);
  const [name, setName] = useState("");
  const [status, setStatus] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [comments, setComments] = useState<CommentWithUser[]>([]);
  const [commentsLoading, setCommentsLoading] = useState(true);
  const [categories, setCategories] = useState<Category[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>("");

  // Slate editor setup
  const editor = useMemo(() => withHistory(withReact(createEditor())), []);
  const [editorValue, setEditorValue] = useState<Descendant[]>(initialValue);

  const renderElement = useCallback((props: any) => {
    return <p {...props.attributes}>{props.children}</p>;
  }, []);

  const fetchUserPhotos = async () => {
    try {
      const userId = localStorage.getItem("userId");
      if (!userId) {
        throw new Error("User ID not found");
      }

      const response = await fetch(
        `http://localhost:3000/photos/photos/user/${userId}`,
        {
          headers: {
            Accept: "application/json",
          },
          credentials: "include",
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      setImages(data);
    } catch (error) {
      console.error("Error fetching images:", error);
      setError(
        error instanceof Error ? error.message : "Failed to fetch images"
      );
    } finally {
      setLoading(false);
    }
  };

  const fetchComments = async (photoId: string) => {
    try {
      const [commentsResponse, usersResponse] = await Promise.all([
        fetch(`http://localhost:3000/comments/photo/${photoId}`, {
          headers: { Accept: "application/json" },
        }),
        fetch(`http://localhost:3000/user/users`, {
          headers: { Accept: "application/json" },
        }),
      ]);

      if (!commentsResponse.ok || !usersResponse.ok) {
        throw new Error("Failed to fetch comments");
      }

      const commentsData = await commentsResponse.json();
      const usersData = await usersResponse.json();

      // Create a map of user data
      const userMap = new Map<string, { username: string; user_icon: string }>(
        usersData.map((user: User) => [
          user.id,
          { username: user.username, user_icon: user.user_icon },
        ])
      );

      // Add user data to comments
      const commentsWithUsers = commentsData.map((comment: Comment) => {
        const userData = userMap.get(comment.id_user);
        return {
          ...comment,
          username: userData?.username || "Unknown User",
          user_icon: userData?.user_icon || "",
        } as CommentWithUser;
      });

      setComments(commentsWithUsers);
    } catch (error) {
      console.error("Error fetching comments:", error);
    } finally {
      setCommentsLoading(false);
    }
  };

  useEffect(() => {
    fetchUserPhotos();
  }, []);

  const handleEditClick = async (photo: Photo) => {
    setEditingPhoto(photo);
    setName(photo.name);
    setStatus(photo.status);
    setEditorValue([
      {
        type: "paragraph",
        children: [{ text: photo.description || "" }],
      },
    ]);

    // Fetch categories and current photo's category
    try {
      const [categoriesResponse, currentCategoryResponse] = await Promise.all([
        fetch("http://localhost:3000/categories", {
          headers: { Accept: "application/json" },
        }),
        fetch(`http://localhost:3000/photos_categories/photo/${photo.id}`, {
          headers: { Accept: "application/json" },
        }),
      ]);

      const categoriesData = await categoriesResponse.json();
      setCategories(categoriesData);

      if (currentCategoryResponse.ok) {
        const categoryData = await currentCategoryResponse.json();
        if (categoryData && categoryData.length > 0) {
          setSelectedCategory(categoryData[0].id);
        }
      }
    } catch (error) {
      console.error("Error fetching categories:", error);
    }

    setCommentsLoading(true);
    await fetchComments(photo.id);
  };

  const handleSave = async () => {
    if (!editingPhoto) return;

    try {
      setIsSaving(true);
      const description = editorValue
        .map((node) => {
          if ("children" in node) {
            return (node.children[0] as CustomText).text;
          }
          return "";
        })
        .join("\n")
        .trim();

      const response = await fetch(
        `http://localhost:3000/photos/edit/${editingPhoto.id}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          credentials: "include",
          body: JSON.stringify({
            name,
            description,
            status,
          }),
        }
      );

      if (!response.ok) {
        throw new Error("Failed to update photo");
      }

      // Update category if changed
      if (selectedCategory) {
        // First, we'll add the new category relationship
        await fetch(`http://localhost:3000/photos_categories/add`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify({
            photo_id: editingPhoto.id,
            category_id: selectedCategory,
          }),
        });
      }

      // Refresh the photos list
      await fetchUserPhotos();
      setEditingPhoto(null);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to update photo");
    } finally {
      setIsSaving(false);
    }
  };

  const handleDelete = async () => {
    if (!editingPhoto) return;

    if (
      !window.confirm(
        "Are you sure you want to delete this photo? This action cannot be undone."
      )
    ) {
      return;
    }

    try {
      setIsDeleting(true);
      const response = await fetch(
        `http://localhost:3000/photos/delete/${editingPhoto.id}`,
        {
          method: "DELETE",
          credentials: "include",
        }
      );

      if (!response.ok) {
        throw new Error("Failed to delete photo");
      }

      // Refresh the photos list
      await fetchUserPhotos();
      setEditingPhoto(null);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to delete photo");
    } finally {
      setIsDeleting(false);
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (!images?.length) {
    return <div>No photos found. Start by uploading some photos!</div>;
  }

  if (editingPhoto) {
    return (
      <div className="max-w-4xl mx-auto p-6 space-y-8">
        {/* Header */}
        <div className="flex items-center">
          <button
            onClick={() => setEditingPhoto(null)}
            className="flex items-center text-gray-600 hover:text-gray-900"
          >
            <ArrowLeft className="w-5 h-5 mr-2" />
            Back to My Photos
          </button>
        </div>

        {/* Photo preview */}
        <div className="relative w-full h-[400px]">
          <Image
            src={editingPhoto.path}
            alt={editingPhoto.name}
            fill
            className="object-contain rounded-lg"
          />
        </div>

        {/* Edit form */}
        <div className="space-y-6">
          {/* Name field */}
          <div>
            <label
              htmlFor="name"
              className="block text-sm font-medium text-gray-700 mb-2"
            >
              Photo Name
            </label>
            <input
              type="text"
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              placeholder={editingPhoto.name}
            />
          </div>

          {/* Category field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Category
            </label>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              <option value="">Select a category</option>
              {categories.map((category) => (
                <option key={category.id} value={category.id}>
                  {category.name}
                </option>
              ))}
            </select>
          </div>

          {/* Description field */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Description
            </label>
            <div className="border border-gray-300 rounded-md">
              <Slate
                editor={editor}
                initialValue={editorValue}
                onChange={(value) => setEditorValue(value)}
              >
                <Editable
                  className="min-h-[150px] p-2"
                  placeholder={
                    editingPhoto.description || "Enter a description..."
                  }
                  renderElement={renderElement}
                />
              </Slate>
            </div>
          </div>

          {/* Status toggle and action buttons */}
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Visibility
              </label>
              <div className="flex items-center space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    checked={status}
                    onChange={() => setStatus(true)}
                    className="mr-2"
                  />
                  Visible
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    checked={!status}
                    onChange={() => setStatus(false)}
                    className="mr-2"
                  />
                  Hidden
                </label>
              </div>
            </div>

            <div className="flex space-x-4">
              <button
                onClick={handleSave}
                disabled={isSaving}
                className="flex items-center px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 disabled:opacity-50"
              >
                <Save className="w-4 h-4 mr-2" />
                {isSaving ? "Saving..." : "Save Changes"}
              </button>
              <button
                onClick={handleDelete}
                disabled={isDeleting}
                className="flex items-center px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 disabled:opacity-50"
              >
                <Trash2 className="w-4 h-4 mr-2" />
                {isDeleting ? "Deleting..." : "Delete Photo"}
              </button>
            </div>
          </div>
        </div>

        {/* Comments section */}
        <div className="mt-12">
          <h2 className="text-xl font-semibold mb-4">Comments</h2>
          {commentsLoading ? (
            <div>Loading comments...</div>
          ) : comments.length === 0 ? (
            <div className="text-gray-500 text-center">No comments yet</div>
          ) : (
            <div className="space-y-4">
              {comments.map((comment: CommentWithUser, index) => (
                <div
                  key={`${comment.id}-${index}`}
                  className={`${
                    index % 2 === 0 ? "bg-[#6366F1] bg-opacity-10" : ""
                  } border border-gray-200 rounded-md p-4 flex flex-col`}
                >
                  <div className="text-gray-800">{comment.content}</div>
                  <div className="flex items-center gap-2 mt-2">
                    {comment.user_icon ? (
                      <Image
                        src={comment.user_icon}
                        alt="User avatar"
                        width={24}
                        height={24}
                        className="rounded-full object-cover w-6 h-6"
                      />
                    ) : (
                      <FaRegCircleUser className="w-6 h-6 text-gray-600" />
                    )}
                    <span className="text-sm text-gray-600">
                      {comment.username}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-wrap justify-around gap-[30px] mt-5 mx-2 md:mx-8">
      {images.map((image) => (
        <div
          key={image.id}
          className="
            p-[15px] pb-[60px] 
            shadow-[5px_15px_15px_rgb(225,225,225)] 
            h-full relative
            hover:shadow-[-5px_15px_15px_rgb(225,225,225)] 
            hover:scale-[1.1] 
            transition-all duration-500 
            after:content-[attr(polaroid-caption)] 
            after:absolute after:bottom-0 after:left-0 
            after:w-full after:text-center 
            after:p-[10px] after:text-[30px]
            after:transition-all after:opacity-50 
            after:hover:opacity-100 after:duration-1000
            mx-auto
            border border-1 border-gray-100
            cursor-pointer
          "
          polaroid-caption={image.name}
          onClick={() => handleEditClick(image)}
        >
          <Image
            src={image.path}
            width={0}
            height={0}
            alt={image.name}
            sizes="100vw"
            className="max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto"
          />
        </div>
      ))}
    </div>
  );
};

export default MyPhotos;

================
File: components/DownloadButton.tsx
================
import React from "react";
import { Download } from "lucide-react";

interface DownloadButtonProps {
  onClick: () => void;
  isLoading?: boolean;
}

const DownloadButton = ({
  onClick,
  isLoading = false,
}: DownloadButtonProps) => {
  return (
    <button
      onClick={onClick}
      disabled={isLoading}
      className="inline-flex items-center gap-2 bg-indigo-500 text-white px-4 py-2 rounded-md 
                 hover:bg-indigo-600 transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      <Download className="w-5 h-5" />
      {isLoading ? "Downloading..." : "Download"}
    </button>
  );
};

export default DownloadButton;

================
File: components/Footer.tsx
================
import React from "react";
import Link from "next/link";
import Image from "next/image";
import logoFull from "../../../public/logo_full.png";

export const Footer = () => {
  return (
    <footer className="text-gray-600 body-font mt-8">
      <div className="container mx-auto flex flex-col items-center justify-center py-4 px-5 md:flex-row md:justify-between md:px-[5rem]">
        <div className="flex flex-col items-center md:items-start w-64">
          <Link
            className="flex title-font font-medium items-center text-gray-900"
            href="/"
          >
            <Image
              src={logoFull}
              width={0}
              height={0}
              sizes="100vw"
              alt="Site logo"
              className="max-w-[5rem] h-full"
            />
            <span className="text-xl">photoStockage</span>
          </Link>
          <p className="mt-2 text-sm text-gray-500 text-center md:text-left md:pl-6">
            Share your photos, share your experience
          </p>
        </div>
        <div className="flex flex-col items-center mt-10 md:flex-row md:mt-0 md:items-start">
          <div className="flex flex-col items-center mb-10 md:items-start md:pl-20">
            <div className="px-0 sm:px-4">
              <h2 className="title-font font-medium text-gray-900 tracking-wideset mb-3">
                Account
              </h2>
              <nav className="list-none mb-10 text-center md:text-left">
                <li>
                  <Link
                    className="text-gray-600 hover:text-gray-800 text-sm"
                    href="/login"
                  >
                    Login
                  </Link>
                </li>
                <li>
                  <Link
                    className="text-gray-600 hover:text-gray-800 text-sm"
                    href="/register"
                  >
                    Sign up
                  </Link>
                </li>
              </nav>
            </div>
          </div>

          <div className="flex flex-col items-center text-center md:text-left mb-10 md:items-start md:pl-20">
            <div className="px-0 sm:px-4">
              <h2 className="title-font font-medium text-gray-900 tracking-wideset mb-3">
                Contact us
              </h2>
              <nav className="list-none mb-10 text-center md:text-left">
                <li>
                  <Link
                    className="text-gray-600 hover:text-gray-800 text-sm"
                    href="/contact"
                  >
                    For suggestions
                  </Link>
                </li>
                <li>
                  <Link
                    className="text-gray-600 hover:text-gray-800 text-sm"
                    href="/contact"
                  >
                    For questions
                  </Link>
                </li>
                <li>
                  <Link
                    className="text-gray-600 hover:text-gray-800 text-sm"
                    href="/contact"
                  >
                    Contact us here
                  </Link>
                </li>
              </nav>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-gray-100">
        <div className="container mx-auto py-4 px-5">
          <div className="flex flex-col items-center sm:items-start md:flex-row md:justify-between">
            <div className="flex items-center">
              <p className="text-gray-500 text-sm text-center md:text-left">
                © 2024 SigmundFrost —
              </p>
              <Link
                className="text-gray-500 text-sm text-center md:text-left"
                href="https://github.com/EsFrost"
              >
                &nbsp; @SigmundFrost
              </Link>
            </div>

            <div className="flex mt-3 md:mt-0">
              <span className="flex justify-center md:ml-auto md:justify-start">
                <Link
                  className="text-gray-500 hover:text-blue-900 transition-all duration-300"
                  href="/"
                >
                  <svg
                    fill="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    className="w-5 h-5"
                    viewBox="0 0 24 24"
                  >
                    <path d="M18 2h-3a5 5 0 00-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 011-1h3z"></path>
                  </svg>
                </Link>

                <Link
                  className="ml-3 text-gray-500 hover:text-blue-900 transition-all duration-300"
                  href="/"
                >
                  <svg
                    fill="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    className="w-5 h-5"
                    viewBox="0 0 24 24"
                  >
                    <path d="M23 3a10.9 10.9 0 01-3.14 1.53 4.48 4.48 0 00-7.86 3v1A10.66 10.66 0 013 4s-4 9 5 13a11.64 11.64 0 01-7 2c9 5 20 0 20-11.5a4.5 4.5 0 00-.08-.83A7.72 7.72 0 0023 3z"></path>
                  </svg>
                </Link>

                <Link
                  className="ml-3 text-gray-500 hover:text-blue-900 transition-all duration-300"
                  href="/"
                >
                  <svg
                    fill="none"
                    stroke="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    className="w-5 h-5"
                    viewBox="0 0 24 24"
                  >
                    <rect
                      width="20"
                      height="20"
                      x="2"
                      y="2"
                      rx="5"
                      ry="5"
                    ></rect>
                    <path d="M16 11.37A4 4 0 1112.63 8 4 4 0 0116 11.37zm1.5-4.87h.01"></path>
                  </svg>
                </Link>

                <Link
                  className="ml-3 text-gray-500 hover:text-blue-900 transition-all duration-300"
                  href="/"
                >
                  <svg
                    fill="currentColor"
                    stroke="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="0"
                    className="w-5 h-5"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke="none"
                      d="M16 8a6 6 0 016 6v7h-4v-7a2 2 0 00-2-2 2 2 0 00-2 2v7h-4v-7a6 6 0 016-6zM2 9h4v12H2z"
                    ></path>
                    <circle cx="4" cy="4" r="2" stroke="none"></circle>
                  </svg>
                </Link>
              </span>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

================
File: components/Header.tsx
================
"use client";
import React, { useEffect, useState } from "react";
import Link from "next/link";
import Image from "next/image";
import { useRouter } from "next/navigation";
import logoFull from "../../../public/logo_full.png";
import { FaRegCircleUser } from "react-icons/fa6";

export const Header = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const router = useRouter();
  const [user_icon, setuser_icon] = useState<string>("");

  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = Number(localStorage.getItem("tokenExpires"));
      const user_icon = localStorage.getItem("user_icon") || "";

      if (isLoggedIn && Date.now() > tokenExpires) {
        localStorage.removeItem("isLoggedIn");
        localStorage.removeItem("tokenExpires");
        localStorage.removeItem("user_icon");
        setIsLoggedIn(false);
        setuser_icon("");
      } else {
        setIsLoggedIn(isLoggedIn);
        setuser_icon(user_icon);
      }
    };

    checkAuth();
    window.addEventListener("storage", checkAuth);
    window.addEventListener("logoutEvent", checkAuth);

    return () => {
      window.removeEventListener("storage", checkAuth);
      window.removeEventListener("logoutEvent", checkAuth);
    };
  }, []);

  const handleLogout = async () => {
    try {
      const response = await fetch("http://localhost:3000/user/logout", {
        method: "POST",
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        localStorage.removeItem("isLoggedIn");
        localStorage.removeItem("tokenExpires");
        localStorage.removeItem("user_icon");
        localStorage.removeItem("userId");
        setIsLoggedIn(false);
        router.push("/");
        window.dispatchEvent(new Event("logoutEvent"));
      }
    } catch (error) {
      console.error("Logout failed:", error);
    }
  };

  return (
    <header className="text-gray-600 body-font">
      <div className="container mx-auto flex flex-col items-center p-5 md:flex-row md:justify-between">
        <Link
          className="flex title-font font-medium items-center text-gray-900 justify-center"
          href="/"
        >
          <Image
            src={logoFull}
            width={0}
            height={0}
            sizes="100vw"
            alt="Site logo"
            className="max-w-[5rem] h-full"
          />
          <span className="hidden md:block text-xl">photoStockage</span>
        </Link>

        <nav className="flex flex-wrap items-center text-base mt-3 md:mt-0">
          <Link
            className="mr-5 hover:text-gray-900 bg-left-bottom bg-gradient-to-r from-[#4f46e5] to-[#d4d2f4] bg-[length:0%_2px] bg-no-repeat hover:bg-[length:100%_2px] transition-all duration-500 ease-out"
            href="/"
          >
            Home
          </Link>
          <Link
            className="mr-5 hover:text-gray-900 bg-left-bottom bg-gradient-to-r from-[#4f46e5] to-[#d4d2f4] bg-[length:0%_2px] bg-no-repeat hover:bg-[length:100%_2px] transition-all duration-500 ease-out"
            href="/about"
          >
            About
          </Link>
          <Link
            className="mr-5 hover:text-gray-900 bg-left-bottom bg-gradient-to-r from-[#4f46e5] to-[#d4d2f4] bg-[length:0%_2px] bg-no-repeat hover:bg-[length:100%_2px] transition-all duration-500 ease-out"
            href="/contact"
          >
            Contact Us
          </Link>
        </nav>

        <div className="flex justify-end ml-0">
          {isLoggedIn ? (
            <div className="flex items-center gap-4">
              {user_icon ? (
                <Link href="/dashboard">
                  <Image
                    src={user_icon}
                    alt="User icon"
                    width={0}
                    height={0}
                    sizes="100vw"
                    className="rounded-full object-cover w-8 h-8"
                  />
                </Link>
              ) : (
                <Link href="/dashboard">
                  <FaRegCircleUser className="w-8 h-8 text-gray-600" />
                </Link>
              )}
              <button
                onClick={handleLogout}
                className="inline-flex items-center bg-red-500 text-white border-0 py-1 px-3 focus:outline-none hover:bg-red-600 rounded text-base mt-3 md:mt-0"
              >
                Logout
              </button>
            </div>
          ) : (
            <>
              <Link href="/register">
                <button className="inline-flex items-center text-white bg-indigo-500 border-0 py-1 px-3 focus:outline-none hover:bg-indigo-600 rounded text-base mt-3 md:mt-0">
                  Sign Up
                </button>
              </Link>
              <Link href="/login">
                <button className="inline-flex items-center bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base mt-3 md:mt-0 ml-5 text-inherit">
                  Login
                </button>
              </Link>
            </>
          )}
        </div>
      </div>
    </header>
  );
};

================
File: components/Hero.tsx
================
"use client";
import React, { useEffect, useState } from "react";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/navigation";

export const Hero = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = Number(localStorage.getItem("tokenExpires"));

      if (isLoggedIn && Date.now() > tokenExpires) {
        localStorage.removeItem("isLoggedIn");
        localStorage.removeItem("tokenExpires");
        setIsLoggedIn(false);
      } else {
        setIsLoggedIn(isLoggedIn);
      }
    };

    checkAuth();
    const interval = setInterval(checkAuth, 60000);

    // Add listener for logout event
    window.addEventListener("logoutEvent", checkAuth);
    window.addEventListener("storage", checkAuth);

    return () => {
      window.removeEventListener("storage", checkAuth);
      window.removeEventListener("logoutEvent", checkAuth);
      clearInterval(interval);
    };
  }, []);

  const handleLogout = async () => {
    try {
      const response = await fetch("http://localhost:3000/user/logout", {
        method: "POST",
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        localStorage.removeItem("isLoggedIn");
        localStorage.removeItem("tokenExpires");
        localStorage.removeItem("user_icon");
        setIsLoggedIn(false);
        router.push("/");
        window.dispatchEvent(new Event("logoutEvent"));
      }
    } catch (error) {
      console.error("Logout failed:", error);
    }
  };

  return (
    <section className="text-gray-600 body-font px-2 sm:px-[2rem]">
      <div className="container mx-auto flex flex-col px-5 py-24 md:flex-row md:items-center">
        <div className="flex flex-col items-center text-center mb-16 md:mb-0 md:items-start md:text-left md:pr-24 md:flex-grow">
          <h1 className="title-font text-3xl mb-4 font-medium text-gray-900">
            Share your photos. Download photos for your next project
            <br className="inline-block" />
            Start here.
          </h1>
          <p className="mb-9 leading-relaxed">
            Do you have photos you want to share with others? Do you want to
            find photos to use for your next project? Are you tired of copyright
            protected material? Then this site is the place to be.
            {!isLoggedIn && " Start now by signing up or logging in."}
          </p>
          <div className="flex justify-center">
            {isLoggedIn ? (
              <button
                onClick={handleLogout}
                className="inline-flex text-white bg-red-500 border-0 py-2 px-6 focus:outline-none hover:bg-red-600 rounded text-lg"
              >
                Logout
              </button>
            ) : (
              <>
                <Link href="/register">
                  <button className="inline-flex text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded text-lg">
                    Sign Up
                  </button>
                </Link>
                <Link href="/login">
                  <button className="ml-4 inline-flex text-gray-700 bg-gray-100 border-0 py-2 px-6 focus:outline-none hover:bg-gray-200 rounded text-lg">
                    Login
                  </button>
                </Link>
              </>
            )}
          </div>
        </div>
        <div className="hidden md:block">
          <Image
            src="https://images.pexels.com/photos/147411/italy-mountains-dawn-daybreak-147411.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
            width={0}
            height={0}
            alt="Picture"
            sizes="100vw"
            className="object-cover object-center rounded w-[720px] xl:w-[520px] 2xl:w-[480px] min-w-[420px] hidden md:block"
          />
        </div>
      </div>
    </section>
  );
};

================
File: components/Likes.tsx
================
"use client";
import { useRouter } from "next/navigation";
import React, { useState, useEffect } from "react";
import { FcLike } from "react-icons/fc";
import Link from "next/link";

export const Likes = ({ photo_id }: { photo_id: string }) => {
  const router = useRouter();
  const [likes, setLikes] = useState<{ count: string }[]>([]);
  const [liked, setLiked] = useState<{ hasLiked: boolean }>({
    hasLiked: false,
  });
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(true);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);

  const test = 1;

  useEffect(() => {
    const fetchData = async () => {
      if (!photo_id) return;

      try {
        // Check authentication with proper type handling
        const isLoggedIn = localStorage.getItem("isLoggedIn");
        const tokenExpires = localStorage.getItem("tokenExpires");
        const isAuthenticated =
          isLoggedIn === "true" &&
          tokenExpires &&
          Number(tokenExpires) > Date.now();

        setIsAuthenticated(Boolean(isAuthenticated));

        // Fetch likes count (this doesn't require auth)
        const likesResponse = await fetch(
          `http://localhost:3000/likes/likes/${photo_id}`,
          {
            headers: {
              Accept: "application/json",
            },
          }
        );

        if (!likesResponse.ok) {
          throw new Error(`HTTP error! status: ${likesResponse.status}`);
        }

        const likesData = await likesResponse.json();
        setLikes(likesData);

        // Only check if user has liked when authenticated
        if (isAuthenticated) {
          const hasLikedResponse = await fetch(
            `http://localhost:3000/likes/check/${photo_id}`,
            {
              headers: {
                Accept: "application/json",
              },
              credentials: "include",
            }
          );

          if (!hasLikedResponse.ok) {
            throw new Error(`HTTP error! status: ${hasLikedResponse.status}`);
          }

          const hasLikedData = await hasLikedResponse.json();
          setLiked(hasLikedData);
        } else {
          // Reset liked status when not authenticated
          setLiked({ hasLiked: false });
        }
      } catch (error) {
        setError(
          error instanceof Error ? error.message : "Failed to fetch data."
        );
      } finally {
        setLoading(false);
      }
    };

    fetchData();

    // Storage event listener with proper type handling
    const handleStorageChange = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn");
      const tokenExpires = localStorage.getItem("tokenExpires");
      const isAuthenticated =
        isLoggedIn === "true" &&
        tokenExpires &&
        Number(tokenExpires) > Date.now();

      setIsAuthenticated(Boolean(isAuthenticated));
    };

    window.addEventListener("storage", handleStorageChange);
    return () => window.removeEventListener("storage", handleStorageChange);
  }, [photo_id]);

  if (loading) {
    return <div># Likes</div>;
  }

  if (error) {
    return <p>{error}</p>;
  }

  const handleLikeUnlike = async () => {
    if (!isAuthenticated) {
      router.push("/login"); // Replace with your login route
      return;
    }

    if (liked.hasLiked) {
      try {
        const response = await fetch(
          `http://localhost:3000/likes/like/${photo_id}`,
          {
            method: "DELETE",
            headers: {
              Accept: "application/json",
            },
            credentials: "include",
          }
        );
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        // Refetch likes after unliking
        const likesResponse = await fetch(
          `http://localhost:3000/likes/likes/${photo_id}`,
          {
            headers: {
              Accept: "application/json",
            },
          }
        );

        if (!likesResponse.ok) {
          throw new Error(`HTTP error! status: ${likesResponse.status}`);
        }

        const likesData = await likesResponse.json();
        setLikes(likesData);
        setLiked({ hasLiked: false });
      } catch (error) {
        setError(
          error instanceof Error ? error.message : "Failed to fetch likes."
        );
      }
    } else {
      try {
        const response = await fetch(
          `http://localhost:3000/likes/like/${photo_id}`,
          {
            method: "POST",
            headers: {
              Accept: "application/json",
            },
            credentials: "include",
          }
        );
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        // Refetch likes after liking
        const likesResponse = await fetch(
          `http://localhost:3000/likes/likes/${photo_id}`,
          {
            headers: {
              Accept: "application/json",
            },
          }
        );

        if (!likesResponse.ok) {
          throw new Error(`HTTP error! status: ${likesResponse.status}`);
        }

        const likesData = await likesResponse.json();
        setLikes(likesData);
        setLiked({ hasLiked: true });
      } catch (error) {
        setError(
          error instanceof Error ? error.message : "Failed to fetch likes."
        );
      }
    }
  };

  return (
    <div className="flex gap-2 items-center">
      <div className="relative group cursor-pointer" onClick={handleLikeUnlike}>
        <FcLike
          className={`w-12 h-12 ${
            liked.hasLiked ? "opacity-100" : "opacity-30"
          } group-hover:opacity-100 duration-300 transition-all group-hover:scale-[1.2]`}
        />
      </div>

      {likes.length > 0 && likes[0].count === "1" ? (
        <p className="text-xl">{likes[0]?.count} Like</p>
      ) : (
        <p className="text-xl">{likes[0]?.count} Likes</p>
      )}
    </div>
  );
};

================
File: components/OfflineFallback.tsx
================
// components/OfflineFallback.tsx
export default function OfflineFallback() {
  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="text-center p-8">
        <h2 className="text-2xl font-bold mb-4">You&apos;re offline</h2>
        <p>Please check your internet connection and try again.</p>
      </div>
    </div>
  );
}

================
File: components/Polaroid.tsx
================
"use client";
import React, { useEffect, useState } from "react";
import Image from "next/image";
import Link from "next/link";
import { Photo, Category } from "@/app/utils/interfaces";

export const Polaroid = () => {
  const [images, setImages] = useState<Photo[]>();
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [categories, setCategories] = useState<Category[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [imagesResponse, categoriesResponse] = await Promise.all([
          fetch("http://localhost:3000/photos/photos", {
            headers: { Accept: "application/json" },
          }),
          fetch("http://localhost:3000/categories", {
            headers: { Accept: "application/json" },
          }),
        ]);

        if (!imagesResponse.ok || !categoriesResponse.ok) {
          throw new Error("Failed to fetch data");
        }

        const [imagesData, categoriesData] = await Promise.all([
          imagesResponse.json(),
          categoriesResponse.json(),
        ]);

        setImages(imagesData);
        setCategories(categoriesData);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, []);

  const handleCategoryChange = async (categoryId: string) => {
    try {
      let url = "http://localhost:3000/photos/photos";
      if (categoryId !== "all") {
        url = `http://localhost:3000/photos_categories/category/${categoryId}`;
      }

      const response = await fetch(url, {
        headers: { Accept: "application/json" },
      });

      if (!response.ok) {
        throw new Error("Failed to fetch photos");
      }

      const data = await response.json();
      setImages(data);
      setSelectedCategory(categoryId);
    } catch (error) {
      console.error("Error filtering photos:", error);
    }
  };

  return (
    <div>
      <div className="flex justify-end px-8 mb-6">
        <select
          value={selectedCategory}
          onChange={(e) => handleCategoryChange(e.target.value)}
          className="block w-48 bg-white border border-gray-300 rounded-md py-2 pl-3 pr-10 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        >
          <option value="all">All Categories</option>
          {categories.map((category) => (
            <option key={category.id} value={category.id}>
              {category.name}
            </option>
          ))}
        </select>
      </div>
      <div className="flex flex-wrap justify-around gap-[30px] mt-5 mx-2 md:mx-8">
        {images?.map((image) => (
          <div
            key={image.id}
            className="
        p-[15px] pb-[60px] 
        shadow-[5px_15px_15px_rgb(225,225,225)] 
        h-full relative
        hover:shadow-[-5px_15px_15px_rgb(225,225,225)] 
        hover:scale-[1.1] 
        transition-all duration-500 
        after:content-[attr(polaroid-caption)] 
        after:absolute after:bottom-0 after:left-0 
        after:w-full after:text-center 
        after:p-[10px] after:text-[30px]
        after:transition-all after:opacity-50 
        after:hover:opacity-100 after:duration-1000
        mx-auto
        border border-1 border-gray-100
        "
            polaroid-caption={image.name}
          >
            <Link href={`/photo/${image.id}`}>
              <Image
                src={image.path}
                width={0}
                height={0}
                alt={image.name}
                sizes="100vw"
                className="max-w-[250px] min-w-[250px] w-auto h-auto opacity-50 hover:opacity-100 transition-all duration-500 mx-auto"
              />
            </Link>
          </div>
        ))}
      </div>
    </div>
  );
};

================
File: components/SlateEditor.tsx
================
"use client";
import React, { useMemo, useState, useCallback } from "react";
import { Slate, Editable, withReact, ReactEditor } from "slate-react";
import { createEditor, Descendant, BaseEditor } from "slate";
import { withHistory } from "slate-history";

// Define custom types for plain text
type CustomElement = {
  type: "paragraph";
  children: CustomText[];
};

type CustomText = {
  text: string;
};

// Extend Slate's custom types
declare module "slate" {
  interface CustomTypes {
    Editor: BaseEditor & ReactEditor;
    Element: CustomElement;
    Text: CustomText;
  }
}

interface SlateEditorProps {
  onSubmit: (content: string) => void;
}

const initialValue: Descendant[] = [
  {
    type: "paragraph",
    children: [{ text: "" }],
  },
];

const SlateEditor = ({ onSubmit }: SlateEditorProps) => {
  const editor = useMemo(() => withReact(withHistory(createEditor())), []);
  const [value, setValue] = useState<Descendant[]>(initialValue);
  const [focused, setFocused] = useState(false);

  const handleFocus = useCallback(() => {
    setFocused(true);
  }, []);

  const handleBlur = useCallback(() => {
    setFocused(false);
  }, []);

  const handleChange = useCallback(
    (newValue: Descendant[]) => {
      setValue(newValue);
      const { selection } = editor;
      if (selection && focused) {
        ReactEditor.focus(editor);
      }
    },
    [editor, focused]
  );

  const renderElement = useCallback((props: any) => {
    return <p {...props.attributes}>{props.children}</p>;
  }, []);

  const handleSubmit = () => {
    const content = value
      .map((node) => (node as any).children[0].text)
      .join("\n")
      .trim();

    if (content) {
      onSubmit(content);
      setValue(initialValue);
    }
  };

  return (
    <div>
      <Slate editor={editor} initialValue={value} onChange={handleChange}>
        <Editable
          renderElement={renderElement}
          placeholder="Leave a comment if you'd like"
          className="border border-gray-300 p-2 h-40 relative"
          onFocus={handleFocus}
          onBlur={handleBlur}
        />
      </Slate>
      <button
        onClick={handleSubmit}
        className="mt-2 px-4 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600 transition-colors"
      >
        Submit Comment
      </button>
    </div>
  );
};

export default SlateEditor;

================
File: components/UserTooltip.tsx
================
"use client";
import { useState } from "react";

interface UserTooltipProps {
  username: string;
  email: string;
  className?: string;
}

const UserTooltip = ({ username, email, className = "" }: UserTooltipProps) => {
  const [isTooltipVisible, setIsTooltipVisible] = useState(false);

  return (
    <div className="relative inline-block">
      <span
        className={`cursor-pointer hover:text-indigo-600 transition-colors ${className}`}
        onMouseEnter={() => setIsTooltipVisible(true)}
        onMouseLeave={() => setIsTooltipVisible(false)}
      >
        {username}
      </span>
      {isTooltipVisible && (
        <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg whitespace-nowrap z-50">
          {email}
          <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-8 border-transparent border-t-gray-900"></div>
        </div>
      )}
    </div>
  );
};

export default UserTooltip;

================
File: contact/page.tsx
================
import React from "react";
import Image from "next/image";
import logoFull from "../../../public/logo_full.png";
import Link from "next/link";

export default function ContactUs() {
  return (
    <div className="min-h-[100vh] flex flex-col px-0 sm:px-5 md:px-[5rem] mx-auto">
      <div
        className="flex flex-col items-center mt-[5rem] p-0 sm:p-10 md:flex-row md:items-stretch 
                    md:border-2 md:border-solid md:border-blue-900 md:outline md:outline-2 
                    md:outline-offset-[15px] md:outline-blue-900 relative"
      >
        <div className="w-full text-center md:w-1/3 md:pr-8">
          <Image
            src={logoFull}
            width={0}
            height={0}
            sizes="100vw"
            alt="Site logo"
            className="w-[5rem] h-auto pt-24 mb-4 mx-auto"
          />
          <p className="text-gray-600 leading-relaxed text-base">
            You can also contact us through email.
          </p>
          <p className="text-gray-600 leading-relaxed text-base">
            Email: photostockage@photostockage.com
          </p>
          <p className="text-gray-600 leading-relaxed text-base">
            Or through our social media links that can be found{" "}
            <Link href="/">here</Link>
          </p>
        </div>

        {/* Vertical Divider */}
        <div className="hidden md:block absolute top-4 bottom-4 left-1/3 w-px bg-blue-900"></div>

        <div className="w-full md:w-2/3 md:pl-4">
          <section className="text-gray-600 body-font relative">
            <div className="container py-24 mx-auto">
              <div className="flex flex-col text-center w-full mb-12">
                <h1 className="text-3xl font-medium title-font mb-4 text-gray-900">
                  Contact Us
                </h1>
                <p className="mx-auto leading-relaxed text-base w-full sm:w-2/3">
                  For any questions you might have. For any suggestions. Or just
                  to chat with us.
                </p>
              </div>
              <div className="w-full px-4 sm:w-1/2 sm:mx-auto">
                <div className="flex flex-wrap -m-2">
                  <div className="p-2 w-full sm:w-1/2">
                    <div className="relative">
                      <label
                        htmlFor="name"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Name
                      </label>
                      <input
                        type="text"
                        id="name"
                        name="name"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                      />
                    </div>
                  </div>
                  <div className="p-2 w-full sm:w-1/2">
                    <div className="relative">
                      <label
                        htmlFor="email"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Email
                      </label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                      />
                    </div>
                  </div>
                  <div className="p-2 w-full">
                    <div className="relative">
                      <label
                        htmlFor="message"
                        className="leading-7 text-sm text-gray-600"
                      >
                        Message
                      </label>
                      <textarea
                        id="message"
                        name="message"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out"
                      ></textarea>
                    </div>
                  </div>
                  <div className="p-2 w-full">
                    <button className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg">
                      Send message
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
      </div>
    </div>
  );
}

================
File: dashboard/page.tsx
================
"use client";
import React, { useState, useEffect } from "react";
import {
  Menu,
  X,
  Upload,
  Users,
  MessageSquare,
  User,
  LogOut,
  Heart,
  Download,
  Plus,
  ChartBar,
} from "lucide-react";
import { useRouter } from "next/navigation";
import AddPhotoForm from "../components/dashboard/user/AddPhotoForm";
import { MyPhotos } from "../components/dashboard/user/MyPhotos";
import { Downloads } from "../components/dashboard/user/Downloads";
import MyComments from "../components/dashboard/user/MyComments";
import MyLikes from "../components/dashboard/user/MyLikes";
import MyAccount from "../components/dashboard/user/MyAccount";
import AdminMyAccount from "../components/dashboard/administrator/MyAccount";
import Categories from "../components/dashboard/administrator/Categories";
import AdminComments from "../components/dashboard/administrator/Comments";
import AdminUsers from "../components/dashboard/administrator/Users";
import AdminPhotos from "../components/dashboard/administrator/Photos";

// Menu configurations for different roles
const adminMenuOptions = [
  { id: "account", label: "My Account", icon: User, component: AdminMyAccount },
  { id: "photos", label: "Photos", icon: Upload, component: AdminPhotos },
  {
    id: "categories",
    label: "Categories",
    icon: ChartBar,
    component: Categories,
  },
  {
    id: "comments",
    label: "Comments",
    icon: MessageSquare,
    component: AdminComments,
  },
  { id: "users", label: "Users", icon: Users, component: AdminUsers },
  { id: "logout", label: "Logout", icon: LogOut, component: null },
];

const userMenuOptions = [
  { id: "account", label: "My Account", icon: User, component: MyAccount },
  { id: "addPhoto", label: "Add Photo", icon: Plus, component: AddPhotoForm },
  { id: "myPhotos", label: "My Photos", icon: Upload, component: MyPhotos },
  {
    id: "myComment",
    label: "My Comments",
    icon: MessageSquare,
    component: MyComments,
  },
  {
    id: "favorites",
    label: "My Likes",
    icon: Heart,
    component: MyLikes,
  },
  {
    id: "downloads",
    label: "My Downloads",
    icon: Download,
    component: Downloads,
  },
  { id: "logout", label: "Logout", icon: LogOut, component: null },
];

export default function Dashboard() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [userRole, setUserRole] = useState<"admin" | "user" | null>(null);
  const [selectedOption, setSelectedOption] = useState<any>(null);
  const router = useRouter();

  useEffect(() => {
    const checkAuth = async () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = localStorage.getItem("tokenExpires");
      const userId = localStorage.getItem("userId");
      const isAuthenticated =
        isLoggedIn && tokenExpires && Number(tokenExpires) > Date.now();

      if (!isAuthenticated || !userId) {
        router.push("/login");
        return;
      }

      try {
        const accessLevel = localStorage.getItem("access_level");
        const role = accessLevel === "true" ? "admin" : "user";
        setUserRole(role);

        const menuOptions =
          role === "admin" ? adminMenuOptions : userMenuOptions;
        setSelectedOption(menuOptions[0]);
      } catch (error) {
        console.error("Error checking authorization:", error);
        router.push("/login");
      }
    };

    checkAuth();

    window.addEventListener("storage", checkAuth);
    window.addEventListener("logoutEvent", checkAuth);

    return () => {
      window.removeEventListener("storage", checkAuth);
      window.removeEventListener("logoutEvent", checkAuth);
    };
  }, [router]);

  const handleOptionClick = (option: (typeof adminMenuOptions)[0]) => {
    if (option.id === "logout") {
      localStorage.removeItem("isLoggedIn");
      localStorage.removeItem("tokenExpires");
      localStorage.removeItem("user_icon");
      localStorage.removeItem("userId");
      router.push("/login");
      return;
    }

    // For direct menu clicks, just update component and reset URL
    router.push("/dashboard");
    setSelectedOption(option);
    setIsMenuOpen(false);
  };

  if (!userRole || !selectedOption) {
    return <div>Loading...</div>;
  }

  const menuOptions = userRole === "admin" ? adminMenuOptions : userMenuOptions;

  return (
    <div className="relative min-h-screen bg-gray-50">
      {/* Mobile Menu Button */}
      <button
        onClick={() => setIsMenuOpen(true)}
        className="lg:hidden fixed right-4 top-4 z-50 p-2 rounded-md hover:bg-gray-100"
      >
        <Menu className="w-6 h-6" />
      </button>

      {/* Mobile Overlay and Menu code stays the same */}

      <div className="flex">
        {/* Desktop Sidebar */}
        <div
          className={`${
            isMenuOpen ? "block" : "hidden"
          } lg:block w-64 bg-white shadow-lg fixed top-0 left-0 z-50 overflow-y-auto lg:relative min-h-[100vh]`}
        >
          <nav className="mt-4">
            {menuOptions.map((option) => (
              <button
                key={option.id}
                onClick={() => handleOptionClick(option)}
                className={`w-full text-left px-4 py-3 hover:bg-gray-100 transition-colors flex items-center gap-2
                  ${
                    selectedOption.id === option.id
                      ? "bg-indigo-50 text-indigo-600"
                      : "text-gray-700"
                  }
                `}
              >
                <option.icon className="w-5 h-5" />
                {option.label}
              </button>
            ))}
          </nav>
        </div>

        {/* Main Content */}
        <main
          className={`flex-1 transition-all duration-300
          ${isMenuOpen ? "blur-sm lg:blur-none" : ""} min-h-[100vh]`}
        >
          <div className="p-4">
            <h1 className="text-2xl font-semibold mb-4">
              {selectedOption.label}
            </h1>
            {selectedOption.component && <selectedOption.component />}
          </div>
        </main>
      </div>
    </div>
  );
}

================
File: globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: layout.tsx
================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { Header } from "./components/Header";
import { Footer } from "./components/Footer";
import CookieConsent from "./components/CookieConsent";
import BackToTopButton from "./components/BackToTopButton";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "photoStockage",
  description: "A site where you can share your photos",
  manifest: "/manifest.json",
  icons: {
    icon: "/favicon.ico",
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${inter.className} flex flex-col`}>
        <Header />
        {children}
        <Footer />
        <CookieConsent />
        <BackToTopButton />
      </body>
    </html>
  );
}

================
File: login/page.tsx
================
"use client";
import React, { useEffect, useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";

export default function LoginPage() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const [errors, setErrors] = useState({
    email: "",
    password: "",
  });
  const [loginError, setLoginError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = localStorage.getItem("tokenExpires");
      const isAuthenticated =
        isLoggedIn && tokenExpires && Number(tokenExpires) > Date.now();

      if (isAuthenticated) {
        router.push("/");
      }
    };

    checkAuth();
  }, [router]);

  // Handle input changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value.trim(),
    }));
    // Clear field-specific error when user starts typing
    if (errors[name as keyof typeof errors]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
    // Clear general login error when user makes any change
    if (loginError) {
      setLoginError("");
    }
  };

  // Validate form fields
  const validateForm = () => {
    const newErrors = {
      email: "",
      password: "",
    };
    let isValid = true;

    if (!formData.email) {
      newErrors.email = "Email field cannot be empty";
      isValid = false;
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "Please enter a valid email address";
      isValid = false;
    }

    if (!formData.password) {
      newErrors.password = "Password field cannot be empty";
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  // Sanitize input data
  const sanitizeData = (data: typeof formData) => {
    return {
      email: data.email.toLowerCase().trim(),
      password: data.password.trim(),
    };
  };

  // const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
  //   e.preventDefault();
  //   setLoginError("");
  //   if (!validateForm()) return;
  //   setIsLoading(true);

  //   try {
  //     const response = await fetch("http://localhost:3000/user/login", {
  //       method: "POST",
  //       headers: { "Content-Type": "application/json" },
  //       credentials: "include",
  //       body: JSON.stringify(sanitizeData(formData)),
  //     });

  //     const loginData = await response.json();
  //     const token = loginData.token;
  //     const tokenParts = token.split(".");
  //     const payload = JSON.parse(atob(tokenParts[1]));

  //     const userResponse = await fetch(
  //       `http://localhost:3000/user/user/${payload.id}`,
  //       {
  //         credentials: "include",
  //         headers: { Accept: "application/json" },
  //       }
  //     );

  //     const userData = await userResponse.json();
  //     const user = userData[0]; // Access first element of array

  //     const expiresIn = 30 * 24 * 60 * 60 * 1000;
  //     localStorage.setItem("isLoggedIn", "true");
  //     localStorage.setItem("tokenExpires", String(Date.now() + expiresIn));
  //     localStorage.setItem("userId", payload.id); // Add this line
  //     localStorage.setItem("user_icon", user.user_icon || "");

  //     window.dispatchEvent(new Event("storage"));
  //     router.push("/");
  //   } catch (error) {
  //     console.error("Login error:", error);
  //     setLoginError("Login failed. Please check your credentials.");
  //     setIsLoading(false);
  //   }
  // };

  // In login/page.tsx, update handleSubmit:

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoginError("");
    if (!validateForm()) return;
    setIsLoading(true);

    try {
      const response = await fetch("http://localhost:3000/user/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify(sanitizeData(formData)),
      });

      const loginData = await response.json();
      const token = loginData.token;
      const tokenParts = token.split(".");
      const payload = JSON.parse(atob(tokenParts[1]));

      // Fetch user data
      const userResponse = await fetch(
        `http://localhost:3000/user/user/${payload.id}`,
        {
          credentials: "include",
          headers: { Accept: "application/json" },
        }
      );

      const userData = await userResponse.json();
      const user = userData[0];

      const expiresIn = 30 * 24 * 60 * 60 * 1000;
      localStorage.setItem("isLoggedIn", "true");
      localStorage.setItem("tokenExpires", String(Date.now() + expiresIn));
      localStorage.setItem("userId", payload.id);
      localStorage.setItem("access_level", payload.access_level);
      localStorage.setItem("user_icon", user.user_icon || "");

      window.dispatchEvent(new Event("storage"));
      router.push("/");
    } catch (error) {
      console.error("Login error:", error);
      setLoginError(error instanceof Error ? error.message : "Login failed");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-[calc(100vh-200px)] flex flex-col px-0 sm:px-5 mx-auto w-full max-w-md">
      <section className="text-gray-600 body-font relative">
        <div className="container py-24 mx-auto">
          <div className="flex flex-col text-center w-full mb-12">
            <h1 className="text-3xl font-medium title-font mb-4 text-gray-900">
              Login
            </h1>
            <p className="mx-auto leading-relaxed text-base">
              Welcome back! Please enter your credentials to access your
              account.
            </p>
          </div>

          <form onSubmit={handleSubmit} className="w-full px-4">
            <div className="flex flex-wrap -m-2">
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="email"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Email
                  </label>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border ${
                      errors.email ? "border-red-500" : "border-gray-300"
                    } focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out`}
                  />
                  {errors.email && (
                    <p className="text-red-500 text-xs mt-1">{errors.email}</p>
                  )}
                </div>
              </div>

              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="password"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Password
                  </label>
                  <input
                    type="password"
                    id="password"
                    name="password"
                    value={formData.password}
                    onChange={handleChange}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border ${
                      errors.password ? "border-red-500" : "border-gray-300"
                    } focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out`}
                  />
                  {errors.password && (
                    <p className="text-red-500 text-xs mt-1">
                      {errors.password}
                    </p>
                  )}
                </div>
              </div>

              {loginError && (
                <div className="p-2 w-full">
                  <p className="text-red-500 text-sm text-center">
                    {loginError}
                  </p>
                </div>
              )}

              <div className="p-2 w-full">
                <button
                  type="submit"
                  disabled={isLoading}
                  className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isLoading ? "Logging in..." : "Login"}
                </button>
              </div>

              <div className="p-2 w-full text-center mt-4">
                <p className="text-sm text-gray-600">
                  Don&apos;t have an account?{" "}
                  <Link
                    href="/register"
                    className="text-indigo-500 hover:text-indigo-600"
                  >
                    Sign up here
                  </Link>
                </p>
              </div>
            </div>
          </form>
        </div>
      </section>
    </div>
  );
}

================
File: not-found.tsx
================
import Link from "next/link";
import { Home, Search } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-[calc(100vh-200px)] flex items-center justify-center">
      <div className="text-center px-4">
        <h1 className="text-9xl font-bold text-indigo-500 mb-4">404</h1>
        <div className="mb-8">
          <h2 className="text-2xl font-semibold text-gray-800 mb-2">
            Oops! Page not found
          </h2>
          <p className="text-gray-600">
            The page you&apos;re looking for has slipped through our photo
            frames.
          </p>
        </div>

        <div className="space-y-4">
          <div className="p-4 bg-gray-50 rounded-lg max-w-md mx-auto text-gray-600">
            <p>Here are a few suggestions:</p>
            <ul className="mt-2 text-left list-disc list-inside">
              <li>Check the URL for typos</li>
              <li>The page might have been moved or deleted</li>
              <li>Return home and try navigating to your destination</li>
            </ul>
          </div>

          <div className="flex justify-center gap-4">
            <Link
              href="/"
              className="inline-flex items-center gap-2 px-6 py-3 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 transition-colors"
            >
              <Home className="w-4 h-4" />
              Go Home
            </Link>
            <Link
              href="/"
              className="inline-flex items-center gap-2 px-6 py-3 border border-indigo-500 text-indigo-500 rounded-md hover:bg-indigo-50 transition-colors"
            >
              <Search className="w-4 h-4" />
              Browse Photos
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: page.tsx
================
import { Polaroid } from "./components/Polaroid";
import { Hero } from "./components/Hero";

export default function Home() {
  return (
    <>
      <Hero />
      <main className="min-h-screen">
        <Polaroid />
      </main>
    </>
  );
}

================
File: photo/[id]/page.tsx
================
"use client";
import React, { useState, useEffect } from "react";
import Image from "next/image";
import { usePathname } from "next/navigation";
import { Likes } from "@/app/components/Likes";
import { Comments } from "@/app/components/Comments";
import DownloadButton from "@/app/components/DownloadButton";
import { Photo, Category, User } from "@/app/utils/interfaces";
import UserTooltip from "@/app/components/UserTooltip";

export default function PhotoPage() {
  const [photo, setPhoto] = useState<Photo>({
    id: "",
    user_id: "",
    name: "",
    description: "",
    path: "",
    status: false,
    user: {
      username: "",
      email: "",
      id: "",
      user_icon: "",
    },
  });
  const [category, setCategory] = useState<Category | null>(null);
  const [user, setUser] = useState<User | null>(null);

  const pathname = usePathname();
  const id = pathname?.split("/").pop();

  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(true);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);

  useEffect(() => {
    const fetchPhoto = async () => {
      if (!id) return;

      try {
        // Fetch both photo and category data in parallel
        const [photoResponse, categoryResponse] = await Promise.all([
          fetch(`http://localhost:3000/photos/photo/${id}`, {
            headers: {
              Accept: "application/json",
            },
          }),
          fetch(`http://localhost:3000/photos_categories/photo/${id}`, {
            headers: {
              Accept: "application/json",
            },
          }),
        ]);

        if (!photoResponse.ok) {
          throw new Error(`HTTP error status: ${photoResponse.status}`);
        }

        const photoData = await photoResponse.json();
        setPhoto(photoData);

        const fetchUser = async () => {
          const userResponse = await fetch(
            `http://localhost:3000/user/user/${photoData.user_id}`,
            {
              headers: {
                Accept: "application/json",
              },
            }
          );

          if (!userResponse.ok) {
            throw new Error(`HTTP error status: ${userResponse.status}`);
          }

          const userData = await userResponse.json();
          return userData;
        };

        const userRes = await fetchUser();
        if (userRes && userRes.length > 0) {
          photoData.user = userRes[0];
          setUser(userRes[0]);
        }

        // Handle category data if it exists
        if (categoryResponse.ok) {
          const categoryData = await categoryResponse.json();
          if (categoryData && categoryData.length > 0) {
            setCategory(categoryData[0]);
          }
        }
      } catch (error) {
        setError(
          error instanceof Error ? error.message : "Failed to fetch photo."
        );
      } finally {
        setLoading(false);
      }
    };

    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = localStorage.getItem("tokenExpires");
      const isAuthenticated =
        isLoggedIn && tokenExpires && Number(tokenExpires) > Date.now();

      setIsAuthenticated(Boolean(isAuthenticated));
    };

    checkAuth();

    fetchPhoto();
  }, [id]);

  if (loading) {
    return <div className="mt-[5rem] text-center">Loading...</div>;
  }

  if (error) {
    return (
      <div className="mt-[5rem] text-center">
        <p>{error}</p>
      </div>
    );
  }

  if (!photo) {
    return <div className="mt-[5rem] text-center">No photo found</div>;
  }

  const handleDownload = async () => {
    try {
      // If user is authenticated, track the download
      if (isAuthenticated) {
        try {
          const response = await fetch(
            `http://localhost:3000/downloads/download/${photo.id}`,
            {
              method: "POST",
              credentials: "include",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
              },
            }
          );

          if (!response.ok) {
            console.error("Failed to track download");
          }
        } catch (error) {
          console.error("Error tracking download:", error);
          // Continue with download even if tracking fails
        }
      }

      // Proceed with download regardless of authentication status
      const response = await fetch(photo.path);
      const blob = await response.blob();

      const downloadUrl = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = downloadUrl;

      // Get file extension from path or default to .jpg
      const extension = photo.path.split(".").pop() || "jpg";
      link.download = `${photo.name}.${extension}`;

      document.body.appendChild(link);
      link.click();

      document.body.removeChild(link);
      window.URL.revokeObjectURL(downloadUrl);
    } catch (error) {
      console.error("Download failed:", error);
    }
  };

  return photo.status ? (
    <>
      <div className="mt-[5rem] min-h-screen md:min-h-0 mx-auto">
        <div
          className="
          border-solid
          p-[15px] pb-[60px] 
          shadow-[5px_15px_15px_rgb(225,225,225)] 
          h-full relative
          hover:shadow-[-5px_15px_15px_rgb(225,225,225)] 
          transition-all duration-500
          after:content-[attr(polaroid-caption)] 
          after:absolute after:bottom-0 after:left-0 
          after:w-full after:text-center 
          after:p-[10px] after:text-[30px]
          border border-1 border-gray-100
        "
          polaroid-caption={photo.name}
        >
          <Image
            src={photo.path}
            alt={photo.name}
            sizes="100vw"
            width={0}
            height={0}
            quality={100}
            className="w-full h-auto object-scale-down max-w-[80vw] max-h-[80vh] mx-auto"
            unoptimized
          />
        </div>
        {/* Display user information */}
        {user && (
          <div className="mt-8 text-gray-600">
            Created by{" "}
            <UserTooltip
              username={user.username}
              email={user.email}
              className="font-medium"
            />
          </div>
        )}
        <div className="mt-8 flex justify-between">
          <Likes photo_id={photo.id} />
          <DownloadButton onClick={handleDownload} />
        </div>

        {/* Add category display here */}
        {category && (
          <div className="mt-8">
            <span className="text-gray-600">Category: </span>
            <span className="font-medium">{category.name}</span>
          </div>
        )}
        <div className="mt-8">{photo.description}</div>

        <div className="mt-8">
          <Comments photo_id={photo.id} />
        </div>
      </div>
    </>
  ) : (
    <div className="mt-[5rem] text-center">
      <p>This photo has been made private.</p>
    </div>
  );
}

================
File: register/page.tsx
================
"use client";
import React, { useState, useRef, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import Image from "next/image";

export default function RegisterPage() {
  const router = useRouter();
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    user_icon: null as File | null,
  });

  const [previewUrl, setPreviewUrl] = useState<string>("");
  const [errors, setErrors] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    user_icon: "",
  });
  const [registrationError, setRegistrationError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [registrationSuccess, setRegistrationSuccess] = useState(false);

  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
      const tokenExpires = localStorage.getItem("tokenExpires");
      const isAuthenticated =
        isLoggedIn && tokenExpires && Number(tokenExpires) > Date.now();

      if (isAuthenticated) {
        router.push("/");
      }
    };

    checkAuth();
  }, [router]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value.trim(),
    }));

    if (errors[name as keyof typeof errors]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }

    if (registrationError) {
      setRegistrationError("");
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (file.size > 8 * 1024 * 1024) {
        // 5MB limit
        setErrors((prev) => ({
          ...prev,
          user_icon: "File size must be less than 5MB",
        }));
        return;
      }

      if (!file.type.startsWith("image/")) {
        setErrors((prev) => ({
          ...prev,
          user_icon: "File must be an image",
        }));
        return;
      }

      setFormData((prev) => ({
        ...prev,
        user_icon: file,
      }));

      // Create preview URL for the image
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrl(reader.result as string);
      };
      reader.readAsDataURL(file);

      setErrors((prev) => ({
        ...prev,
        user_icon: "",
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
      user_icon: "",
    };
    let isValid = true;

    if (!formData.username) {
      newErrors.username = "Username is required";
      isValid = false;
    } else if (formData.username.length < 3) {
      newErrors.username = "Username must be at least 3 characters long";
      isValid = false;
    }

    if (!formData.email) {
      newErrors.email = "Email is required";
      isValid = false;
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "Please enter a valid email address";
      isValid = false;
    }

    if (!formData.password) {
      newErrors.password = "Password is required";
      isValid = false;
    } else if (formData.password.length < 6) {
      newErrors.password = "Password must be at least 6 characters long";
      isValid = false;
    }

    if (!formData.confirmPassword) {
      newErrors.confirmPassword = "Please confirm your password";
      isValid = false;
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = "Passwords do not match";
      isValid = false;
    }

    // User icon validation only if a file was selected
    if (formData.user_icon) {
      if (formData.user_icon.size > 5 * 1024 * 1024) {
        newErrors.user_icon = "File size must be less than 5MB";
        isValid = false;
      } else if (!formData.user_icon.type.startsWith("image/")) {
        newErrors.user_icon = "File must be an image";
        isValid = false;
      }
    }

    setErrors(newErrors);
    return isValid;
  };

  const clearImageSelection = () => {
    setFormData((prev) => ({
      ...prev,
      user_icon: null,
    }));
    setPreviewUrl("");
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!validateForm()) return;
    setIsLoading(true);

    try {
      let imagePath = "";
      if (formData.user_icon) {
        const fileData = new FormData();
        const fileIdentifier = crypto.randomUUID();
        fileData.append("file", formData.user_icon);
        fileData.append("identifier", fileIdentifier);

        const uploadResponse = await fetch("/api/upload", {
          method: "POST",
          body: fileData,
        });

        const uploadResult = await uploadResponse.json();
        if (!uploadResponse.ok || !uploadResult.success) {
          throw new Error(uploadResult.error || "Image upload failed");
        }

        imagePath = uploadResult.fileUrl;
      }

      const requestBody = {
        username: formData.username,
        email: formData.email,
        password: formData.password,
        user_icon: imagePath,
      };

      const response = await fetch(`http://localhost:3000/user/register`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      const responseData = await response.json();
      if (!response.ok) {
        throw new Error(responseData.message || "Registration failed");
      }

      setRegistrationSuccess(true);
      setRegistrationError("");
    } catch (error) {
      console.error("Registration error:", error);
      setRegistrationError(
        error instanceof Error ? error.message : "Registration failed"
      );
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-[calc(100vh-200px)] flex flex-col px-0 sm:px-5 mx-auto w-full max-w-md">
      <section className="text-gray-600 body-font relative">
        <div className="container py-24 mx-auto">
          <div className="flex flex-col text-center w-full mb-12">
            <h1 className="text-3xl font-medium title-font mb-4 text-gray-900">
              Register
            </h1>
            <p className="mx-auto leading-relaxed text-base">
              {registrationSuccess
                ? "Registration successful! You can now proceed to login."
                : "Create your account to start sharing photos."}
            </p>
          </div>

          <form onSubmit={handleSubmit} className="w-full px-4">
            <div className="flex flex-wrap -m-2">
              {/* Username field */}
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="username"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Username
                  </label>
                  <input
                    type="text"
                    id="username"
                    name="username"
                    value={formData.username}
                    onChange={handleChange}
                    disabled={registrationSuccess}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border 
                      ${errors.username ? "border-red-500" : "border-gray-300"}
                      focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 
                      text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors 
                      duration-200 ease-in-out disabled:opacity-50`}
                  />
                  {errors.username && (
                    <p className="text-red-500 text-xs mt-1">
                      {errors.username}
                    </p>
                  )}
                </div>
              </div>

              {/* Email field */}
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="email"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Email
                  </label>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    disabled={registrationSuccess}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border 
                      ${errors.email ? "border-red-500" : "border-gray-300"}
                      focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 
                      text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors 
                      duration-200 ease-in-out disabled:opacity-50`}
                  />
                  {errors.email && (
                    <p className="text-red-500 text-xs mt-1">{errors.email}</p>
                  )}
                </div>
              </div>

              {/* Password field */}
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="password"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Password
                  </label>
                  <input
                    type="password"
                    id="password"
                    name="password"
                    value={formData.password}
                    onChange={handleChange}
                    disabled={registrationSuccess}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border 
                      ${errors.password ? "border-red-500" : "border-gray-300"}
                      focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 
                      text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors 
                      duration-200 ease-in-out disabled:opacity-50`}
                  />
                  {errors.password && (
                    <p className="text-red-500 text-xs mt-1">
                      {errors.password}
                    </p>
                  )}
                </div>
              </div>

              {/* Confirm Password field */}
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="confirmPassword"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Confirm Password
                  </label>
                  <input
                    type="password"
                    id="confirmPassword"
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleChange}
                    disabled={registrationSuccess}
                    className={`w-full bg-gray-100 bg-opacity-50 rounded border 
                      ${
                        errors.confirmPassword
                          ? "border-red-500"
                          : "border-gray-300"
                      }
                      focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 
                      text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors 
                      duration-200 ease-in-out disabled:opacity-50`}
                  />
                  {errors.confirmPassword && (
                    <p className="text-red-500 text-xs mt-1">
                      {errors.confirmPassword}
                    </p>
                  )}
                </div>
              </div>

              {/* User Icon field */}
              <div className="p-2 w-full">
                <div className="relative">
                  <label
                    htmlFor="user_icon"
                    className="leading-7 text-sm text-gray-600"
                  >
                    Profile Picture (Optional) (8MB max)
                  </label>
                  <input
                    type="file"
                    id="user_icon"
                    name="user_icon"
                    ref={fileInputRef}
                    onChange={handleFileChange}
                    accept="image/*"
                    disabled={registrationSuccess}
                    className="hidden"
                  />
                  <div className="flex flex-col items-center gap-4">
                    {previewUrl && (
                      <>
                        <Image
                          src={previewUrl}
                          alt="Profile preview"
                          width={100}
                          height={100}
                          className="rounded-full object-cover"
                        />
                        <button
                          type="button"
                          onClick={clearImageSelection}
                          disabled={registrationSuccess}
                          className="text-red-500 hover:text-red-700 font-semibold py-1 px-3 rounded disabled:opacity-50"
                        >
                          Remove Photo
                        </button>
                      </>
                    )}
                    <button
                      type="button"
                      onClick={() => fileInputRef.current?.click()}
                      disabled={registrationSuccess}
                      className="bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold py-2 px-4 border border-gray-300 rounded shadow disabled:opacity-50 mt-2"
                    >
                      Choose Profile Picture
                    </button>
                  </div>
                  {errors.user_icon && (
                    <p className="text-red-500 text-xs mt-1">
                      {errors.user_icon}
                    </p>
                  )}
                </div>
              </div>

              {registrationError && (
                <div className="p-2 w-full">
                  <p className="text-red-500 text-sm text-center">
                    {registrationError}
                  </p>
                </div>
              )}

              <div className="p-2 w-full">
                {registrationSuccess ? (
                  <Link href="/login">
                    <button
                      type="button"
                      className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg"
                    >
                      Proceed to Login
                    </button>
                  </Link>
                ) : (
                  <button
                    type="submit"
                    disabled={isLoading}
                    className="flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg disabled:opacity-50"
                  >
                    {isLoading ? "Registering..." : "Register"}
                  </button>
                )}
              </div>

              <div className="p-2 w-full text-center mt-4">
                <p className="text-sm text-gray-600">
                  Already have an account?{" "}
                  <Link
                    href="/login"
                    className="text-indigo-500 hover:text-indigo-600"
                  >
                    Login here
                  </Link>
                </p>
              </div>
            </div>
          </form>
        </div>
      </section>
    </div>
  );
}

================
File: utils/interfaces.tsx
================
export interface Photo {
  id: string;
  user_id: string;
  name: string;
  description: string;
  path: string;
  status: boolean;
  category?: Category; // Optional because it might be loaded separately
  user?: {
    username: string;
    email: string;
    id?: string;
    user_icon?: string;
  };
}

export interface Comment {
  id: string;
  content: string;
  id_photo: string;
  id_user: string;
  status: boolean;
}

export interface User {
  id: string;
  username: string;
  email: string;
  user_icon: string;
}

export interface Category {
  id: string;
  name: string;
  description: string;
}
